<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>专升本重点英语单词例句</title>
    <link href="undefined2019/12/26/%E4%B8%93%E5%8D%87%E6%9C%AC%E9%87%8D%E7%82%B9%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E4%BE%8B%E5%8F%A5/"/>
    <url>2019/12/26/%E4%B8%93%E5%8D%87%E6%9C%AC%E9%87%8D%E7%82%B9%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E4%BE%8B%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="专升本重点英语单词例句"><a href="#专升本重点英语单词例句" class="headerlink" title="专升本重点英语单词例句"></a>专升本重点英语单词例句</h2><h3 id="一-A开头的"><a href="#一-A开头的" class="headerlink" title="一.A开头的"></a>一.A开头的</h3><p>1.accuse</p><pre><code>Perhaps, because there is simply nothing to accuse him of? 或许，其实只是因为没有名目可以用来指控他？I mustered up enough courage to accuse him. 我鼓起足够的勇气控告他。</code></pre><p>2.act     n. 行为,举动v.行为，动作/    actor     n. 男演员    /actress     n. 女演员</p><pre><code>（1）All you have to do is act. 你需要做的只是行动起来。Why do they act this way? 为什么他们要做出这些行为？（2）There, he hoped to become an actor or singer. 他希望能在那儿成为一名演员或歌手。We have to pick the right actor. 我们得挑个合适的演员才行。（3）What is your ambition as an actress – is it to be a superstar in Hollywood? 你作为一个演员的最大的野心是什么呢？ 是不是变成一个好莱坞超级巨星啊？</code></pre><p>3.administration     n. 管理, 经营; 行政部门/    admire     vt.钦佩，佩服/    admission     n.承认，准许，入场费；</p><pre><code>（1）What are the administration costs?. Every system requires an administrator. 什么是管理成本？ 每个系统都需要一个管理员。Return to the administration console. 回到这个管理控制台。（2）Much as I admire him as a writer , I do not like him as a man. 尽管他作为一个作家很值得我钦佩，但我却不喜欢他的为人。What I admire is not what you have, but what you are. 我所羡慕的不是你所拥有的东西，而是你的为人。What personality do you admire? 你欣赏哪种性格的人？（3）By his own admission, Franklin’s proverbs were not original but drawn from “the wisdom of many ages and nations”. 富兰克林自己承认，他的格言并不是独创的，而是从“许多时代和民族的智慧”中提炼出来的。You have to pay RMB10.0 admission. 你须付10元人民币入场费。</code></pre><p>4.agency     n. 代理,代办; 机构, (党、政)机关, 厅/    agent     n. 代理人,代理商</p><pre><code>（1）I think we have to about your proposal about agency carefully. 我想我们必须慎重考虑你方关于代理的建议。This creates an agency problem. 这产生了一个中介问题。The Agency is its own community, in part because of our academic inclinations, but also because of the work we do and the nature of our mission. 我们的机构是一个独一无二的团体，从某种程度上那是因为我们的专业倾向，而不是因为我们所做的工作和任务的性质。（2）I empower my agent to make the deal for me. 我授权我的代理人处理此项交易。In consideration of your extensive experience in the field， we are glad to appoint you as our agent. 考虑到你们在这一业务范围的丰富经验，我们很高兴指定你们为我们的代理。</code></pre><p>5.airline  n. 航空公司/    airplane     n.飞机</p><pre><code>（1）This airline operates five main lines and dozens of branch lines. 这家航空公司经营五条主干线和十几条支线。Right now we only have miles with one airline. 现在我们只是有一个航空公司的里程。（2）The new airplane flies at twice the speed of sound. 这架新式飞机以两倍于音速的速度飞行。    We watched the airplane ascend higher and higher. 我们看着飞机逐渐升高。</code></pre><p>6.amuse     vt. 使欢乐,逗…笑/    analysis     n. 分析,分解</p><pre><code>（1）When tweens and teenagers write and post photos online, they are seeking to please/entertain/amuse their friends. 青少年在网上写日志、发照片，他们只是希望能够取悦/娱乐/逗笑他们的朋友。Such costumes were put on long ago to amuse the audience after the Harvest Fest. 很久以前，人们就在收获节后穿这样的服装娱乐观众。（2）His analysis really hit home. I had never seen myself in that light before. 他的分析的确击中要害， 我自己从未有过那样的见解。We should make a concrete analysis of each specific question. 对于每个具体问题要进行具体分析。The analysis lacks depth. 分析不够透彻。</code></pre><p>7.ancient      adj. 古代的/    accident        n.事故；意外；</p><pre><code>（1）These magnificent ancient buildings demonstrate the great intelligence of the labouring people. 这些壮丽的古代建筑显示了劳动人民的高度智慧。Confucius is considered the greatest of the ancient Chinese sages. 孔子被认为是古代中国最伟大的圣人。（2）She described the accident very carefully. 她非常仔细地描述了事故。What happened that day was not an accident. 而那一天发生的事情不是一次意外。</code></pre><p>8.apparent      adj.明显的, 显而易见的/        appear      vi. 出现, 露面; 看来,似乎</p><pre><code>（1）However that is not apparent yet. 然而，这种情况现在还不明显。Disadvantages to this approach are apparent in the increased complexity and maintenance effort.此方法的缺点在于明显地增加了复杂性和维护工作。（2）The first signs of the dawn appear on the horizon. 黎明的曙光出现在地平线上。</code></pre><p>9.appetite      n. 食欲,胃口; 爱好/    application     n. 请求, 申请; 应用,适用; /    appoint      vt. 任命,委派; 指定,约定</p><pre><code>（1）Exercise will improve your appetite for food. 运动能增进你的食欲。How&#39;s your appetite? 你的胃口怎么样？（2）The wide application of electronic computers in science and technology will free man from the labour of complicated measurement and computation. 电子计算机在科学技术方面广泛的应用将使人们从复杂的计量和计算中摆脱出来。（3）In consideration of your extensive experience in the field， we are glad to appoint you as our agent. 考虑到你们在这一业务范围的丰富经验，我们很高兴指定你们为我们的代理。</code></pre><p>10.approach      v.走近, 靠近n. 方法, 途径; 走近, 靠近/    appropriate      adj. 正确的,适当的</p><pre><code>（1）So how do you decide which approach to use? 那么如何决定要使用哪种方法呢？While I still like this approach, it also has flaws. 尽管我仍然很喜欢这个方法，但它还是有缺陷的。This approach has its limitations. 这种方法有其局限性。（2）You can then select the appropriate product from this full list. 然后您可以从此完整的列表中选择适当的产品。Every role and activity in there should receive its appropriate support. 其中，每一个角色和活动都应该有其相应的支持。</code></pre><p>11.approve      v.批准, 认可, 通过/    approximately      adv. 近似地, 大约</p><pre><code>（1）I have to inform you that we can not approve it. 对于你……的请求，我不得不告诉你我们不能批准。Whether you approve or not, this has been an era of bold movement. 不论你赞成与否，这些都说明了这是一个着敢作敢为的时代。（2）The yolk contains all the fat and approximately half of the protein of the egg. 蛋黄含有鸡蛋中全部的脂肪和大约一半的蛋白质。On some systems the time is a true count of milliseconds, changing approximately every millisecond. 在一些系统上，时间是真正的毫 秒计数，大约每一毫秒改变一次。</code></pre><p>12.argue      v.辩论,说服/    persuade         n.说服，劝说;/    convince         n.说服；使确信，使信服；</p><pre><code>（1）He does not argue with them, because he knows they did not experience what he went through.他不会跟他们争辩，因为他知道他们没有体验过他遭遇的事情。（2）He was able to persuade capital to adopt his plans. 他能说服资方采纳他的计划。（3）But once you have made an estimate, you still have to convince your customer or boss to accept it.但是一旦你做出预测，剩下的事情就是你不得不说服你的客户或老板承认它。If you want to convince others that your opinion is representative of the majority, then just repeat yourself. 如果你想说服他人你的观点是代表大多数人的，那么你只需要不断的重复它。</code></pre><p>13.arise      vi.出现, 发生/    arise from        由…而引起, 由…而产生, 从…中产生</p><pre><code>（1）You have one idea, they have another, and problems arise. 你有一个主意，他们也有一个，问题出现了。You have to take action and deal with problems as they arise. 你必须在问题出现的时候及时采取行动处理问题。（2）Requirements problems often arise from a lack of understanding of context. 需求问题通常是由对环境理解的缺乏导致的。</code></pre><p>14.arm      n. 手臂；武器vt. 武装；备战/    army      n. 军队, 群/    soldier     n.士兵，军人；</p><pre><code>（1）He unlocked his grip on my arm. 他把紧攥着我的胳臂的手松开。Here! Put your arm around her waist! 这里！ 把你的手臂绕在她腰间！（2）Without a people&#39;s army the people have nothing. 没有一个人民的军队，便没有人民的一切。（3）The enemy soldier disguised as civilian. 一名敌兵伪装成了平民。</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自学Vue知识点总结</title>
    <link href="undefined2019/12/25/%E8%87%AA%E5%AD%A6Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>2019/12/25/%E8%87%AA%E5%AD%A6Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="自学Vue知识点总结"><a href="#自学Vue知识点总结" class="headerlink" title="自学Vue知识点总结"></a>自学Vue知识点总结</h2><p><img src="E:%5Chexo%5Cblog%5Csource%5Cimg%5C5.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自学JS知识点总结</title>
    <link href="undefined2019/12/19/%E8%87%AA%E5%AD%A6JS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>2019/12/19/%E8%87%AA%E5%AD%A6JS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="自学JS知识点总结"><a href="#自学JS知识点总结" class="headerlink" title="自学JS知识点总结"></a>自学JS知识点总结</h3><hr><h5 id="1-JS简介"><a href="#1-JS简介" class="headerlink" title="1.JS简介"></a>1.JS简介</h5><p>（1）javascript能改变html的内容：<br>    getElementById() 是多个 JavaScript HTML 方法之一。</p><p>​    本例使用该方法来“查找” id=”demo” 的 HTML 元素，并把元素内容（innerHTML）更改为 “Hello JavaScript”：</p><p>实例如下：</p><pre><code>document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript&quot;;说明：javascript既支持双引号也支持单引号</code></pre><p>（2）javascript能够改变html的属性</p><p>​    本例使用js来改变img中src属性来实现图片的替换</p><p>实例如下：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h2&gt;JavaScript 能做什么？&lt;/h2&gt;&lt;p&gt;JavaScript 能够改变 HTML 属性值。&lt;/p&gt;&lt;p&gt;在本例中，JavaScript 改变了图像的 src 属性值。&lt;/p&gt;&lt;button onclick=&quot;document.getElementById(&#39;myImage&#39;).src=&#39;/i/eg_bulbon.gif&#39;&quot;&gt;开灯&lt;/button&gt;&lt;img id=&quot;myImage&quot; border=&quot;0&quot; src=&quot;/i/eg_bulboff.gif&quot; style=&quot;text-align:center;&quot;&gt;&lt;button onclick=&quot;document.getElementById(&#39;myImage&#39;).src=&#39;/i/eg_bulboff.gif&#39;&quot;&gt;关灯&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>（3）javascript能改变css中的样式</p><p>实例如下：</p><pre><code>document.getElementById(&quot;demo&quot;).style.fontSize = &quot;25px&quot;;</code></pre><p>又可以实现隐的操作</p><pre><code>document.getElementById(&quot;demo&quot;).style.display=&quot;none&quot;;document.getElementById(&quot;demo&quot;).style.display=&quot;block&quot;;</code></pre><hr><h5 id="2-JS的使用"><a href="#2-JS的使用" class="headerlink" title="2.JS的使用"></a>2.JS的使用</h5><p>（1）使用script标签来实现</p><p>实例如下：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script&gt;function myFunction() {    document.getElementById(&quot;demo&quot;).innerHTML = &quot;段落被更改。&quot;;}&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;一张网页&lt;/h1&gt;&lt;p id=&quot;demo&quot;&gt;一个段落&lt;/p&gt;&lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;试一试&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h5 id="3-JavaScript的输出"><a href="#3-JavaScript的输出" class="headerlink" title="3.JavaScript的输出"></a>3.JavaScript的输出</h5><p>注意：javascript不提供任何内建的打印和显示函数</p><p>javascript的显示方案有这几种：</p><pre><code>    JavaScript 能够以不同方式“显示”数据：        使用 window.alert() 写入警告框        使用 document.write() 写入 HTML 输出        使用 innerHTML 写入 HTML 元素        使用 console.log() 写入浏览器控制台</code></pre><p>（1）document.write 方法</p><p>​    作用：主要用来实现测试功能，在 HTML 文档完全加载后使用 document.write()将<em>删除所有已有的 HTML</em> ：</p><p>实例如下：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;我的第一张网页&lt;/h1&gt;&lt;p&gt;我的第一个段落&lt;/p&gt;&lt;button onclick=&quot;document.write(5 + 6)&quot;&gt;试一试&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>（2）window.alert()方法</p><p>​    作用：用警告窗来显示数据</p><p>实例如下：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;我的第一张网页&lt;/h1&gt;&lt;p&gt;我的第一个段落&lt;/p&gt;&lt;script&gt;window.alert(5 + 6);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; </code></pre><p>（3）innerHTML（）的方法</p><p>​    作用：如需访问 HTML 元素，JavaScript 可使用 document.getElementById(id) 方法。</p><p>​    id 属性定义 HTML 元素。innerHTML 属性定义 HTML 内容：</p><p>​    实例如下：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;我的第一张网页&lt;/h1&gt;&lt;p&gt;我的第一个段落&lt;/p&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt; document.getElementById(&quot;demo&quot;).innerHTML = 5 + 6;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; </code></pre><p>（4）console.log（）的方法</p><p>​    作用：在浏览器中，您可使用 console.log() 方法来显示数据。</p><p>​            请通过 F12 来激活浏览器控制台，并在菜单中选择“控制台”。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;我的第一张网页&lt;/h1&gt;&lt;p&gt;我的第一个段落&lt;/p&gt;&lt;script&gt;console.log(5 + 6);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h5 id="4-JavaScript语句"><a href="#4-JavaScript语句" class="headerlink" title="4.JavaScript语句"></a>4.JavaScript语句</h5><p>（1）JavaScript 语句由以下构成：</p><p>​        值、运算符、表达式、关键词和注释。</p><p>（2JavaScript中的关键字：</p><pre><code>     关键词                    描述    break                终止 switch 或循环。    continue            跳出循环并在顶端开始。    debugger            停止执行 JavaScript，并调用调试函数（如果可用）。    do ... while        执行语句块，并在条件为真时重复代码块。    for                    标记需被执行的语句块，只要条件为真。    function            声明函数。    if ... else            标记需被执行的语句块，根据某个条件。    return                退出函数。    switch                标记需被执行的语句块，根据不同的情况。    try ... catch        对语句块实现错误处理。    var                    声明变量。</code></pre><hr><h5 id="5-JavaScript语法"><a href="#5-JavaScript语法" class="headerlink" title="5.JavaScript语法"></a>5.JavaScript语法</h5><p>（1）JavaScirpt变量</p><p>​    在编程语言中，<em>变量</em>用于<em>存储</em>数据值。</p><p>​    JavaScript 使用 var 关键词来<em>声明</em>变量。</p><p>​    = 号用于为变量<em>赋值</em>。</p><p>​    在本例中，x 被定义为变量。然后，x 被赋的值是 7：</p><pre><code>var x;x = 7;</code></pre><p>（2）JavaScript运算符</p><p>JavaScript 使用<em>算数运算符</em>（+ - * /）来<em>计算值</em>：</p><pre><code>(7 + 8) * 10var x, y;var x = 7;var y = 8;</code></pre><p>（3）JavaScript表达式</p><p>​    表达式是值、变量和运算符的组合，计算结果是值。</p><p>​    表达式也可包含变量值：</p><p>​    值可以是多种类型，比如数值和字符串。</p><p>​    例如，”Bill” + “ “ + “Gates”，计算为 “Bill Gates”：</p><pre><code>6 * 10x * 10&quot;Bill&quot; + &quot; &quot; + &quot;Gates&quot;</code></pre><p>（4）JavaScirpt关键字</p><p>​    JavaScript <em>关键词</em>用于标识被执行的动作。</p><p>​    var 关键词告知浏览器创建新的变量：</p><pre><code>var x = 7 + 8;var y = x * 10; </code></pre><p>（5）JavaScript注释</p><p>​    并非所有 JavaScript 语句都被“执行”。</p><p>​    双斜杠 // 或 /* 与 <em>*/</em> 之间的代码被视为<em>注释</em>。</p><p>​    注释会被忽略，不会被执行：</p><pre><code>var x = 7;   // 会执行// var x = 8;   不会执行</code></pre><p>（6）JavaScript标识符</p><pre><code>标识符是名称。在 JavaScript 中，标识符用于命名变量（以及关键词、函数和标签）。在大多数编程语言中，合法名称的规则大多相同。在 JavaScript 中，首字符必须是字母、下划线（-）或美元符号（$）。连串的字符可以是字母、数字、下划线或美元符号。提示：数值不可以作为首字符。这样，JavaScript 就能轻松区分标识符和数值。</code></pre><p>（7）JavaScript对大小写敏感</p><p>​    所有 JavaScript 标识符<em>对大小写敏感</em>。</p><p>​    变量 lastName 和 lastname，是两个不同的变量。</p><pre><code>lastName = &quot;Gates&quot;;lastname = &quot;Jobs&quot;; </code></pre><hr><h5 id="6-JavaScript注释"><a href="#6-JavaScript注释" class="headerlink" title="6.JavaScript注释"></a>6.JavaScript注释</h5><p>（1）单行注释</p><p>​    单行注释以 // 开头。</p><p>​    任何位于 // 与行末之间的文本都会被 JavaScript 忽略（不会执行）。</p><p>​    本例在每条代码行之前使用单行注释：</p><pre><code>// 改变标题： document.getElementById(&quot;myH&quot;).innerHTML = &quot;我的第一张页面&quot;;// 改变段落： document.getElementById(&quot;myP&quot;).innerHTML = &quot;我的第一个段落。&quot;; var x = 5;      // 声明 x，为其赋值 5var y = x + 2;  // 声明 y，为其赋值 x + 2</code></pre><p>（2）多行注释</p><p>​    多行注释以 /* 开头，以 */ 结尾。</p><p>​    任何位于 /* 和 */ 之间的文本都会被 JavaScript 忽略。</p><p>​    本例使用多行注释（注释块）来解释代码：</p><pre><code>/* 下面的代码会改变 网页中 id = &quot;myH&quot; 的标题 以及 id = &quot;myP&quot; 的段落：*/document.getElementById(&quot;myH&quot;).innerHTML = &quot;我的第一张页面&quot;;document.getElementById(&quot;myP&quot;).innerHTML = &quot;我的第一个段落。&quot;; </code></pre><hr><h5 id="7-JavaScript变量"><a href="#7-JavaScript变量" class="headerlink" title="7.JavaScript变量"></a>7.JavaScript变量</h5><p>（1）JavaScript变量</p><p>​        JavaScript 变量是存储数据值的容器。</p><p>​        在本例中，x、y 和 z 是变量：</p><pre><code>var x = 7;var y = 8;var z = x + y; </code></pre><h6 id="类似代数"><a href="#类似代数" class="headerlink" title="类似代数"></a>类似代数</h6><p>在本例中，price1、price2 以及 total 是变量：</p><pre><code>var price1 = 7;var price2 = 8;var price2 = 12;var total = price1 + price2 + price3;在编程中，类似代数，我们使用变量（比如 price1）来存放值。在编程中，类似代数，我们在表达式中使用变量（total = price1 + price2）。从上例中，您可以算出 total 的值是 11。提示：JavaScript 变量是存储数据值的容器。</code></pre><p>（2）JavaScript标识符</p><p>​    所有 JavaScript <em>变量</em>必须以<em>唯一的名称</em>的<em>标识</em>。</p><p>​    这些唯一的名称称为<em>标识符</em>。</p><p>​    标识符可以是短名称（比如 x 和 y），或者更具描述性的名称（age、sum、totalVolume）。</p><p>​    构造变量名称（唯一标识符）的通用规则是：</p><pre><code>1.名称可包含字母、数字、下划线和美元符号2.名称必须以字母开头3.名称也可以 $ 和 _ 开头（但是在本教程中我们不会这么做）4.名称对大小写敏感（y 和 Y 是不同的变量）5.保留字（比如 JavaScript 的关键词）无法用作变量名称提示：JavaScript 标识符对大小写敏感。</code></pre><p>（3）赋值运算符</p><p>​    在 JavaScript 中，等号（=）是赋值运算符，而不是“等于”运算符。</p><p>​    这一点与代数不同。下面的代码在代数中是不合理的：</p><pre><code>x = x + 5</code></pre><p>​    然而在 JavaScript 中，它非常合理：把 x + 5 的值赋给 x。</p><p>​    （计算 x + 5 的值并把结果放入 x 中。x 的值递增 5。）</p><p>​    <strong>注释：</strong>JavaScript 中的“等于”运算符是 <strong>==</strong>。</p><p>（4）JavaScript数据类型</p><p>​        JavaScript 变量可存放数值，比如 100，以及文本值，比如 “Bill Gates”。</p><p>​        在编程中，文本值被称为字符串。</p><p>​        JavaScript 可处理多种数据类型，但是现在，我们只关注数值和字符串值。</p><p>​        字符串被包围在双引号或单引号中。数值不用引号。</p><p>​        如果把数值放在引号中，会被视作文本字符串。</p><p>实例如下：</p><pre><code>var pi = 3.14;var person = &quot;Bill Gates&quot;;var answer = &#39;How are you!&#39;;</code></pre><p>（5）声明（创建）JavaScript变量</p><p>​         JavaScript 中创建变量被称为“声明”变量。</p><pre><code>1.您可以通过 var 关键词来声明 JavaScript 变量：        var carName;2.声明之后，变量是没有值的。（技术上，它的值是 undefined。）  如需*赋值*给变量，请使用等号：        carName = &quot;porsche&quot;;3.您可以在声明变量时向它赋值：        var carName = &quot;porsche&quot;;4.在上面的例子中，我们创建了名为 carName 的变量，并向其赋值 &quot;porsche&quot;。  然后，我们在 id=&quot;demo&quot; 的 HTML 段落中“输出”该值：        &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;        &lt;script&gt;            var carName = &quot;porsche&quot;;            document.getElementById(&quot;demo&quot;).innerHTML = carName;         &lt;/script&gt;</code></pre><p>（6）一条语句多个变量</p><p>​        您可以在一条语句中声明许多变量。</p><p>​        以 var 作为语句的开头，并以<em>逗号</em>分隔变量：</p><p>​        声明可横跨多行</p><pre><code>    var person = &quot;Bill Gates&quot;, carName = &quot;porsche&quot;, price = 15000;    var person = &quot;Bill Gates&quot;,    carName = &quot;porsche&quot;,    price = 15000;</code></pre><p>（7）JavaScript算术</p><pre><code>1.与代数类似，您能够通过 JavaScript 变量进行算术运算，使用 = 和 + 之类的运算符：  实例如下：        var x = 3 + 5 + 8;2.字符串也可以使用加号，但是字符串将被级联：  实例如下：        var x = &quot;Bill&quot; + &quot; &quot; + &quot;Gates&quot;;3.还可以试试这个：  实例如下：        var x = &quot;8&quot; + 3 + 5;  提示：如果把要给数值放入引号中，其余数值会被视作字符串并被级联。4.现在试试这个：  实例如下：        var x = 3 + 5 + &quot;8&quot;;</code></pre><hr><h5 id="8-JavaScript运算符"><a href="#8-JavaScript运算符" class="headerlink" title="8.JavaScript运算符"></a>8.JavaScript运算符</h5><p>（1）JavaScript算术运算符</p><p>​        算数运算符用于对数字执行算数运算：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td></tr><tr><td align="left">-</td><td align="left">减法</td></tr><tr><td align="left">*</td><td align="left">乘法</td></tr><tr><td align="left">/</td><td align="left">除法</td></tr><tr><td align="left">%</td><td align="left">系数</td></tr><tr><td align="left">++</td><td align="left">递加</td></tr><tr><td align="left">–</td><td align="left">递减</td></tr></tbody></table><p>​    提示：JS算术这一章对算数运算符进行了完整描述。</p><p>（2）JavaScript赋值运算符</p><p>​        赋值运算符向 JavaScript 变量赋值。</p><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等同于</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">x = y</td><td align="left">x = y</td></tr><tr><td align="left">+=</td><td align="left">x += y</td><td align="left">x = x + y</td></tr><tr><td align="left">-=</td><td align="left">x -= y</td><td align="left">x = x - y</td></tr><tr><td align="left">*=</td><td align="left">x *= y</td><td align="left">x = x * y</td></tr><tr><td align="left">/=</td><td align="left">x /= y</td><td align="left">x = x / y</td></tr><tr><td align="left">%=</td><td align="left">x %= y</td><td align="left">x = x % y</td></tr></tbody></table><p>​    加法赋值运算符（+=）向变量添加一个值。</p><p>​    赋值：</p><pre><code>    var x = 7;    x += 8; </code></pre><p>（3）JavaScript字符串运算符</p><pre><code>1.+ 运算符也可用于对字符串进行相加（concatenate，级联）。  实例    txt1 = &quot;Bill&quot;;    txt2 = &quot;Gates&quot;;    txt3 = txt1 + &quot; &quot; + txt2;     结果：Bill Gates2.+= 赋值运算符也可用于相加（级联）字符串：  实例    txt1 = &quot;Hello &quot;;    txt1 += &quot;Kitty!&quot;;     结果：Hello Kitty!提示：在用于字符串时，+ 运算符被称为级联运算符。3.字符串和数字的相加  相加两个数字，将返回和，但对一个数字和一个字符串相加将返回一个字符串：    实例        x = 7 + 8;        y = &quot;7&quot; + 8;        z = &quot;Hello&quot; + 7;    结果：        15        78        Hello7提示：如果您对数字和字符串相加，结果将是字符串！</code></pre><p>（4）JavaScript比较运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于</td></tr><tr><td align="left">===</td><td align="left">等值等型</td></tr><tr><td align="left">!=</td><td align="left">不相等</td></tr><tr><td align="left">!==</td><td align="left">不等值或不等型</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td></tr><tr><td align="left">?</td><td align="left">三元运算符</td></tr></tbody></table><p>（5）JavaScript逻辑运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑与</td></tr><tr><td align="left">||</td><td align="left">逻辑或</td></tr><tr><td align="left">!</td><td align="left">逻辑非</td></tr></tbody></table><p>（6）JavaScript类型选择符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">typeof</td><td align="left">返回变量的类型。</td></tr><tr><td align="left">instanceof</td><td align="left">返回 true，如果对象是对象类型的实例。</td></tr></tbody></table><p>（7）JavaScript位运算符</p><p>​    位运算符处理 32 位数。</p><p>​    该运算中的任何数值运算数都会被转换为 32 位的数。结果会被转换回 JavaScript 数。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th><th align="left">等同于</th><th align="left">结果</th><th align="left">十进制</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">与</td><td align="left">5 &amp; 1</td><td align="left">0101 &amp; 0001</td><td align="left">0001</td><td align="left">1</td></tr><tr><td align="left">|</td><td align="left">或</td><td align="left">5 | 1</td><td align="left">0101 | 0001</td><td align="left">0101</td><td align="left">5</td></tr><tr><td align="left">~</td><td align="left">非</td><td align="left">~ 5</td><td align="left">~0101</td><td align="left">1010</td><td align="left">10</td></tr><tr><td align="left">^</td><td align="left">异或</td><td align="left">5 ^ 1</td><td align="left">0101 ^ 0001</td><td align="left">0100</td><td align="left">4</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">零填充左位移</td><td align="left">5 &lt;&lt; 1</td><td align="left">0101 &lt;&lt; 1</td><td align="left">1010</td><td align="left">10</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">有符号右位移</td><td align="left">5 &gt;&gt; 1</td><td align="left">0101 &gt;&gt; 1</td><td align="left">0010</td><td align="left">2</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">零填充右位移</td><td align="left">5 &gt;&gt;&gt; 1</td><td align="left">0101 &gt;&gt;&gt; 1</td><td align="left">0010</td><td align="left">2</td></tr></tbody></table><p>​    上例使用 4 位无符号的例子。但是 JavaScript 使用 32 位有符号数。</p><p>​    因此，在 JavaScript 中，~ 5 不会返回 10，而是返回 -6。</p><p>​    ~00000000000000000000000000000101 将返回 11111111111111111111111111111010。</p><hr><h5 id="9-JavaScript算术运算符优先级"><a href="#9-JavaScript算术运算符优先级" class="headerlink" title="9.JavaScript算术运算符优先级"></a>9.JavaScript算术运算符优先级</h5><p>（1）算术运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td></tr><tr><td align="left">-</td><td align="left">减法</td></tr><tr><td align="left">*</td><td align="left">乘法</td></tr><tr><td align="left">**</td><td align="left">幂（<a href="https://www.w3school.com.cn/js/js_es6.asp" target="_blank" rel="noopener">ES2016</a>）</td></tr><tr><td align="left">/</td><td align="left">除法</td></tr><tr><td align="left">%</td><td align="left">系数</td></tr><tr><td align="left">++</td><td align="left">递增</td></tr><tr><td align="left">–</td><td align="left">递减</td></tr></tbody></table><p>（2）运算符优先级</p><table><thead><tr><th align="left">值</th><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">20</td><td align="left">( )</td><td align="left">表达式分组</td><td align="left">(3 + 4)</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">19</td><td align="left">.</td><td align="left">成员</td><td align="left">person.name</td></tr><tr><td align="left">19</td><td align="left">[]</td><td align="left">成员</td><td align="left">person[“name”]</td></tr><tr><td align="left">19</td><td align="left">()</td><td align="left">函数调用</td><td align="left">myFunction()</td></tr><tr><td align="left">19</td><td align="left">new</td><td align="left">创建</td><td align="left">new Date()</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">17</td><td align="left">++</td><td align="left">后缀递增</td><td align="left">i++</td></tr><tr><td align="left">17</td><td align="left">–</td><td align="left">后缀递减</td><td align="left">i–</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">16</td><td align="left">++</td><td align="left">前缀递增</td><td align="left">++i</td></tr><tr><td align="left">16</td><td align="left">–</td><td align="left">前缀递减</td><td align="left">–i</td></tr><tr><td align="left">16</td><td align="left">!</td><td align="left">逻辑否</td><td align="left">!(x==y)</td></tr><tr><td align="left">16</td><td align="left">typeof</td><td align="left">类型</td><td align="left">typeof x</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">15</td><td align="left">**</td><td align="left">求幂 (ES7)</td><td align="left">10 ** 2</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">14</td><td align="left">*</td><td align="left">乘</td><td align="left">10 * 5</td></tr><tr><td align="left">14</td><td align="left">/</td><td align="left">除</td><td align="left">10 / 5</td></tr><tr><td align="left">14</td><td align="left">%</td><td align="left">模数除法</td><td align="left">10 % 5</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">13</td><td align="left">+</td><td align="left">加</td><td align="left">10 + 5</td></tr><tr><td align="left">13</td><td align="left">-</td><td align="left">减</td><td align="left">10 - 5</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">12</td><td align="left">&lt;&lt;</td><td align="left">左位移</td><td align="left">x &lt;&lt; 2</td></tr><tr><td align="left">12</td><td align="left">&gt;&gt;</td><td align="left">右位移</td><td align="left">x &gt;&gt; 2</td></tr><tr><td align="left">12</td><td align="left">&gt;&gt;&gt;</td><td align="left">右位移（无符号）</td><td align="left">x &gt;&gt;&gt; 2</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">11</td><td align="left">&lt;</td><td align="left">小于</td><td align="left">x &lt; y</td></tr><tr><td align="left">11</td><td align="left">&lt;=</td><td align="left">小于或等于</td><td align="left">x &lt;= y</td></tr><tr><td align="left">11</td><td align="left">&gt;</td><td align="left">大于</td><td align="left">x &gt; y</td></tr><tr><td align="left">11</td><td align="left">&gt;=</td><td align="left">大于或等于</td><td align="left">x &gt;= y</td></tr><tr><td align="left">11</td><td align="left">in</td><td align="left">对象中的属性</td><td align="left">“PI” in Math</td></tr><tr><td align="left">11</td><td align="left">instanceof</td><td align="left">对象的实例</td><td align="left">instanceof Array</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">10</td><td align="left">==</td><td align="left">相等</td><td align="left">x == y</td></tr><tr><td align="left">10</td><td align="left">===</td><td align="left">严格相等</td><td align="left">x === y</td></tr><tr><td align="left">10</td><td align="left">!=</td><td align="left">不相等</td><td align="left">x != y</td></tr><tr><td align="left">10</td><td align="left">!==</td><td align="left">严格不相等</td><td align="left">x !== y</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">9</td><td align="left">&amp;</td><td align="left">按位与</td><td align="left">x &amp; y</td></tr><tr><td align="left">8</td><td align="left">^</td><td align="left">按位 XOR</td><td align="left">x ^ y</td></tr><tr><td align="left">7</td><td align="left">|</td><td align="left">按位或</td><td align="left">x | y</td></tr><tr><td align="left">6</td><td align="left">&amp;&amp;</td><td align="left">逻辑与</td><td align="left">x &amp;&amp; y</td></tr><tr><td align="left">5</td><td align="left">||</td><td align="left">逻辑否</td><td align="left">x || y</td></tr><tr><td align="left">4</td><td align="left">? :</td><td align="left">条件</td><td align="left">? “Yes” : “No”</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">3</td><td align="left">=</td><td align="left">赋值</td><td align="left">x = y</td></tr><tr><td align="left">3</td><td align="left">+=</td><td align="left">赋值</td><td align="left">x += y</td></tr><tr><td align="left">3</td><td align="left">-=</td><td align="left">赋值</td><td align="left">x -= y</td></tr><tr><td align="left">3</td><td align="left">*=</td><td align="left">赋值</td><td align="left">x *= y</td></tr><tr><td align="left">3</td><td align="left">%=</td><td align="left">赋值</td><td align="left">x %= y</td></tr><tr><td align="left">3</td><td align="left">&lt;&lt;=</td><td align="left">赋值</td><td align="left">x &lt;&lt;= y</td></tr><tr><td align="left">3</td><td align="left">&gt;&gt;=</td><td align="left">赋值</td><td align="left">x &gt;&gt;= y</td></tr><tr><td align="left">3</td><td align="left">&gt;&gt;&gt;=</td><td align="left">赋值</td><td align="left">x &gt;&gt;&gt;= y</td></tr><tr><td align="left">3</td><td align="left">&amp;=</td><td align="left">赋值</td><td align="left">x &amp;= y</td></tr><tr><td align="left">3</td><td align="left">^=</td><td align="left">赋值</td><td align="left">x ^= y</td></tr><tr><td align="left">3</td><td align="left">|=</td><td align="left">赋值</td><td align="left">x |= y</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">2</td><td align="left">yield</td><td align="left">暂停函数</td><td align="left">yield x</td></tr><tr><td align="left">1</td><td align="left">,</td><td align="left">逗号</td><td align="left">7 , 8</td></tr></tbody></table><p><strong>注意：</strong>淡红色指示实验性或建议性的技术（ECMASScript 2016 或 ES7）</p><p><strong>提示：</strong>括号中的表达式会在值在表达式的其余部分中被使用之前进行完全计算。  </p><hr><h5 id="10-JavaScript赋值运算符"><a href="#10-JavaScript赋值运算符" class="headerlink" title="10.JavaScript赋值运算符"></a>10.JavaScript赋值运算符</h5><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等同于</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">x = y</td><td align="left">x = y</td></tr><tr><td align="left">+=</td><td align="left">x += y</td><td align="left">x = x + y</td></tr><tr><td align="left">-=</td><td align="left">x -= y</td><td align="left">x = x - y</td></tr><tr><td align="left">*=</td><td align="left">x *= y</td><td align="left">x = x * y</td></tr><tr><td align="left">/=</td><td align="left">x /= y</td><td align="left">x = x / y</td></tr><tr><td align="left">%=</td><td align="left">x %= y</td><td align="left">x = x % y</td></tr><tr><td align="left">&lt;&lt;=</td><td align="left">x &lt;&lt;= y</td><td align="left">x = x &lt;&lt; y</td></tr><tr><td align="left">&gt;&gt;=</td><td align="left">x &gt;&gt;= y</td><td align="left">x = x &gt;&gt; y</td></tr><tr><td align="left">&gt;&gt;&gt;=</td><td align="left">x &gt;&gt;&gt;= y</td><td align="left">x = x &gt;&gt;&gt; y</td></tr><tr><td align="left">&amp;=</td><td align="left">x &amp;= y</td><td align="left">x = x &amp; y</td></tr><tr><td align="left">^=</td><td align="left">x ^= y</td><td align="left">x = x ^ y</td></tr><tr><td align="left">|=</td><td align="left">x |= y</td><td align="left">x = x | y</td></tr><tr><td align="left">**=</td><td align="left">x **= y</td><td align="left">x = x ** y</td></tr></tbody></table><p><strong>提示：***</strong>*=** 运算符属于 ECMAScript 2016 proposal (ES7) 的实验部分。它的跨浏览器表现并不稳定。请勿使用。</p><hr><h5 id="11-JavaScript数据类型"><a href="#11-JavaScript数据类型" class="headerlink" title="11.JavaScript数据类型"></a>11.JavaScript数据类型</h5><p>​    JavaScript 变量能够保存多种<em>数据类型</em>：数值、字符串值、数组、对象等等：</p><pre><code>var length = 7;                             // 数字var lastName = &quot;Gates&quot;;                      // 字符串var cars = [&quot;Porsche&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];         // 数组var x = {firstName:&quot;Bill&quot;, lastName:&quot;Gates&quot;};    // 对象 </code></pre><p>（1）JavaScript数组</p><p>​    JavaScript 数组用方括号书写。</p><p>​    数组的项目由逗号分隔。</p><p>​    下面的代码声明（创建）了名为 cars 的数组，包含三个项目（汽车品牌）：</p><pre><code>var cars = [&quot;Porsche&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];</code></pre><p>​    数组索引基于零，这意味着第一个项目是 [0]，第二个项目是 [1]，以此类推。</p><p>​    您将在本教程中学到更多有关数组的知识。</p><p>（2）JavaScript对象</p><p>​    avaScript 对象用花括号来书写。</p><p>​    对象属性是 <em>name</em>:<em>value</em> 对，由逗号分隔。</p><pre><code>var person = {firstName:&quot;Bill&quot;, lastName:&quot;Gates&quot;, age:62, eyeColor:&quot;blue&quot;};</code></pre><p>​    上例中的对象（person）有四个属性：firstName、lastName、age 以及 eyeColor。</p><p>​    您将在本教程中学到更多有关对象的知识。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse连接Mysql数据库</title>
    <link href="undefined2019/11/02/Eclipse%E8%BF%9E%E6%8E%A5Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>2019/11/02/Eclipse%E8%BF%9E%E6%8E%A5Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="Eclipse连接数据库步骤"><a href="#Eclipse连接数据库步骤" class="headerlink" title="Eclipse连接数据库步骤"></a>Eclipse连接数据库步骤</h2><h5 id="1、先下载JDBC："><a href="#1、先下载JDBC：" class="headerlink" title="1、先下载JDBC："></a>1、先下载JDBC：</h5><p>JDBC代表Java数据库连接(<strong>J</strong>ava <strong>D</strong>ata<strong>b</strong>ase <strong>C</strong>onnectivity)，它是用于Java编程语言和数据库之间的数据库无关连接的标准Java API，换句话说：JDBC是用于在Java语言编程中与数据库连接的API。</p><p>到<a href="http://www.mvnrepository.com" target="_blank" rel="noopener">www.mvnrepository.com</a></p><h5 id="2、打开ECLIPSE-创建一个DYNAMIC-WEB-PROJECT项目"><a href="#2、打开ECLIPSE-创建一个DYNAMIC-WEB-PROJECT项目" class="headerlink" title="2、打开ECLIPSE,创建一个DYNAMIC WEB PROJECT项目"></a>2、打开ECLIPSE,创建一个DYNAMIC WEB PROJECT项目</h5><p>在lib中插入mysql-connector文件</p><h5 id="3-打开-NEWFILE-JSP文件"><a href="#3-打开-NEWFILE-JSP文件" class="headerlink" title="3.打开 NEWFILE.JSP文件"></a>3.打开 NEWFILE.JSP文件</h5><p>插入下面代码 更改相应信息即可</p><pre><code class="jsp">&lt;%@page import=&quot;java.sql.SQLException&quot;%&gt;&lt;%@page import=&quot;java.sql.ResultSet&quot;%&gt;&lt;%@page import=&quot;java.sql.Statement&quot;%&gt;&lt;%@page import=&quot;java.sql.DriverManager&quot;%&gt;&lt;%@page import=&quot;java.sql.Connection&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    你好呀，小可爱    &lt;%    String driver = &quot;com.mysql.jdbc.Driver&quot;;    // URL指向要访问的数据库名test1    String url = &quot;jdbc:mysql://localhost:3306/schooldb&quot;;    // MySQL配置时的用户名    String user = &quot;root&quot;;    // Java连接MySQL配置时的密码    String password = &quot;123456&quot;;    try {        // 1 加载驱动程序        Class.forName(driver);        // 2 连接数据库        Connection conn = DriverManager.getConnection(url, user, password);        // 3 用来执行SQL语句        Statement statement = conn.createStatement();        // 要执行的SQL语句        String sql = &quot;select * from stuinfo&quot;;        ResultSet rs = statement.executeQuery(sql);        String name = null;        String mima = null;        String mima2 = null;        while (rs.next()) {            name = rs.getString(&quot;name&quot;);            mima = rs.getString(&quot;score&quot;);            mima2 = rs.getString(&quot;rank&quot;);            out.println(name + &quot;\t&quot; + mima + &quot;\t&quot; + mima2);        }        rs.close();        conn.close();    } catch (ClassNotFoundException e) {        System.out.println(&quot;Sorry,can`t find the Driver!&quot;);        e.printStackTrace();    } catch (SQLException e) {        e.printStackTrace();    } catch (Exception e) {        e.printStackTrace();    }    %&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL数据库知识点总结</title>
    <link href="undefined2019/11/01/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>2019/11/01/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="Mysql数据库知识点总结"><a href="#Mysql数据库知识点总结" class="headerlink" title="Mysql数据库知识点总结"></a>Mysql数据库知识点总结</h2><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-如何在命令行配置MYSQL数据库"><a href="#1-如何在命令行配置MYSQL数据库" class="headerlink" title="1.如何在命令行配置MYSQL数据库"></a>1.如何在命令行配置MYSQL数据库</h3><p>1）找到MYSQL安装目录的bin目录</p><p>2）放置到path环境变量中</p><h3 id="2-启动停止MYSQL"><a href="#2-启动停止MYSQL" class="headerlink" title="2.启动停止MYSQL"></a>2.启动停止MYSQL</h3><p>启动： netstarmysqla 停止：mysql net stop mysqla</p><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><p>binary,int,float,double,char,varchar,text,datetime</p><h3 id="4-添加数据库"><a href="#4-添加数据库" class="headerlink" title="4.添加数据库"></a>4.添加数据库</h3><pre><code class="mysql">create database 数据库名;</code></pre><h3 id="5-查看数据库"><a href="#5-查看数据库" class="headerlink" title="5.查看数据库"></a>5.查看数据库</h3><pre><code class="mysql">show databases;show create database;</code></pre><h3 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6.删除数据"></a>6.删除数据</h3><pre><code>drop database 数据库名;</code></pre><h3 id="7-使用数据库前需要先打开数据表所在的数据库"><a href="#7-使用数据库前需要先打开数据表所在的数据库" class="headerlink" title="7.使用数据库前需要先打开数据表所在的数据库"></a>7.使用数据库前需要先打开数据表所在的数据库</h3><pre><code>use 数据库名;</code></pre><h3 id="8-创建表"><a href="#8-创建表" class="headerlink" title="8.创建表"></a>8.创建表</h3><pre><code>create table 表名(字段1 类型（长度）,[约束]，.....);</code></pre><h3 id="9-查询当前数据库下有哪些表"><a href="#9-查询当前数据库下有哪些表" class="headerlink" title="9.查询当前数据库下有哪些表"></a>9.查询当前数据库下有哪些表</h3><pre><code>show tables;</code></pre><h3 id="10-查询表结构"><a href="#10-查询表结构" class="headerlink" title="10.查询表结构"></a>10.查询表结构</h3><pre><code>sesc student;</code></pre><h3 id="11-据库备份与还原"><a href="#11-据库备份与还原" class="headerlink" title="11.据库备份与还原"></a>11.据库备份与还原</h3><pre><code>mysqldump-uroot-p first-db&gt;C:123456.sql</code></pre><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>1.数据库没有大小写之分</p><p>2.关键词大写，自定义的小写<br>3.修改表内容的关键词</p><pre><code>alter table 表名 （动作）改表名 动作 rename 新表名改字段类型 动作 modify 字段名 新类型改字段名称 动作 change 旧名称 新名称 新类型增加字段 动作 add 新增字段名 新增字段类型删除字段 动作 drop 字段名删除表 drop table 表名;删除数据库 drop database 数据库名;</code></pre><h3 id="1、数据完整性"><a href="#1、数据完整性" class="headerlink" title="1、数据完整性"></a>1、数据完整性</h3><p>主键约束 primary key 特点是非空且唯一<br>两种写法，直接写在字段后，或者写在创建语句最后 primary key（字段名）<br>联合主键 写在创建语句最后 primary key(字段 1，字段 2)</p><h3 id="2、设置字段自增长-auto-increment"><a href="#2、设置字段自增长-auto-increment" class="headerlink" title="2、设置字段自增长 auto_increment"></a>2、设置字段自增长 auto_increment</h3><p>数据表只有一个自增长列，为主键列</p><h3 id="3、外键约束-foreign-key"><a href="#3、外键约束-foreign-key" class="headerlink" title="3、外键约束 foreign key"></a>3、外键约束 foreign key</h3><p>写在创建语句最后 foreign key (从表字段名) references 主表名<br>（主表字段名）</p><h3 id="4、非空约束-not-null"><a href="#4、非空约束-not-null" class="headerlink" title="4、非空约束 not null"></a>4、非空约束 not null</h3><h3 id="5、默认约束-default-值，注意字符串，需外加单引号"><a href="#5、默认约束-default-值，注意字符串，需外加单引号" class="headerlink" title="5、默认约束 default 值，注意字符串，需外加单引号"></a>5、默认约束 default 值，注意字符串，需外加单引号</h3><h3 id="6、唯一约束-unique"><a href="#6、唯一约束-unique" class="headerlink" title="6、唯一约束 unique"></a>6、唯一约束 unique</h3><p>主键约束和唯一约束的区别，主键无意义，唯一约束可以为 null<br>设计规范<br>1NF（第一范式）保证数据列的原子性<br>家庭住址 可分为省 市 县 具体地址<br>2NF 保证每列都和主键相关（唯一主键，联合主键不满足）<br>学号 姓名 课程 教材 教材内容<br>1 张三 数据库 mysql XXXXX（1 千字）<br>1 张三 java java<br>2 李四 数据库 mysql XXXXX（1 千字）<br>3 王五 数据库 mysql XXXXX（1 千字）<br>数据冗余 更新异常 插入异常 删除异常</p><p>3NF 保证每列都和主键直接相关<br>学号 姓名 班级 辅导员编号 辅导员姓名 辅导员家庭住址</p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="数据库的增删改操作"><a href="#数据库的增删改操作" class="headerlink" title="数据库的增删改操作"></a>数据库的增删改操作</h3><h3 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h3><pre><code>insert into 表名（列 1，列 2，。。。） values（值 1，值 2，。。。）；查询数据select * from 表名;</code></pre><h3 id="2、into-关键字可以省略"><a href="#2、into-关键字可以省略" class="headerlink" title="2、into 关键字可以省略"></a>2、into 关键字可以省略</h3><pre><code>简写形式 insert 表名（列 1，列 2，。。。） values（值 1，值 2，。。。）；</code></pre><h3 id="3、全列插入可省略列明"><a href="#3、全列插入可省略列明" class="headerlink" title="3、全列插入可省略列明"></a>3、全列插入可省略列明</h3><pre><code>简写形式 insert 表名 values（值 1，值 2，。。。）；</code></pre><h3 id="4、自增列和默认列可省略"><a href="#4、自增列和默认列可省略" class="headerlink" title="4、自增列和默认列可省略"></a>4、自增列和默认列可省略</h3><p>注意：自增列只增不减<br>除非：alter table 表名 set auto_increment=值;<br>或者 truncate table 表名; 清空表，自增从 1 开始记数</p><h3 id="5、一次插入多行"><a href="#5、一次插入多行" class="headerlink" title="5、一次插入多行"></a>5、一次插入多行</h3><pre><code>insert 表名（列 1，列 2，。。。） values（值 1，值 2，。。。），（值 1，值 2，。。。），。。。。；</code></pre><h3 id="6、比较运算"><a href="#6、比较运算" class="headerlink" title="6、比较运算"></a>6、比较运算</h3><p>大于&gt;=大于等于&lt;小于&lt;=小于等于 =等于 !=或&lt;&gt;不等于</p><p>is null 为空 is not null 非空 in 在某个范围 not in 不在某个范<br>围 like 模糊查询 between and 在某个范围</p><h3 id="7、逻辑运算"><a href="#7、逻辑运算" class="headerlink" title="7、逻辑运算"></a>7、逻辑运算</h3><p>not 非 and 并且 or 或者</p><h3 id="8、修改数据"><a href="#8、修改数据" class="headerlink" title="8、修改数据"></a>8、修改数据</h3><pre><code>update 表名 set 列名 1=值 1，列名 2=值 2… where 条件;</code></pre><p>如果没有 where 全更新</p><h3 id="9、删除数据"><a href="#9、删除数据" class="headerlink" title="9、删除数据"></a>9、删除数据</h3><pre><code>delete from 表名 where 条件; </code></pre><p>注意删除数据不更改自增列的值</p><h3 id="10、清空数据"><a href="#10、清空数据" class="headerlink" title="10、清空数据"></a>10、清空数据</h3><p>truncate table 表名功能同 delete from 表名<br>但是<br>1&gt;Delete 无法修改自增列，truncate 重置自增列<br>2&gt;Delete 可以删除外键约束，truncate 只能清空数据，无法删除外<br>键约束<br>3&gt;Delete 可以通过备份和日子恢复，truncate 无法恢复</p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p><strong>注意：</strong><br>1、数据库没有双引号，字符一定要用单引号包括<br>2、字段名不用引号，单引号包括的一定是字符<br>``(数字键 1 左边的键)</p><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><p>select 字段 1、字段 2… from 表名 where 条件 order by 字段 1、<br>字段 2.. limit 数字 1,数字 2;<br>*是通配符，表示所有字段<br>使用 as 为字段重命名</p><h3 id="3、where-查询条件"><a href="#3、where-查询条件" class="headerlink" title="3、where 查询条件"></a>3、where 查询条件</h3><h3 id="4、distinct-查询不重复字段"><a href="#4、distinct-查询不重复字段" class="headerlink" title="4、distinct 查询不重复字段"></a>4、distinct 查询不重复字段</h3><h3 id="5、limit-n-m"><a href="#5、limit-n-m" class="headerlink" title="5、limit n,m"></a>5、limit n,m</h3><p>从 n+1 行开始取，取 m 行，行数从 0 开始<br>limit n,取前 n 行</p><h3 id="6、order-by-字段-1"><a href="#6、order-by-字段-1" class="headerlink" title="6、order by 字段 1"></a>6、order by 字段 1</h3><p>通过字段 1 将表从小到大排列<br>order by 字段 1 desc<br>order by 字段 1,字段 2<br>先按照字段 1 排列，在字段 1 相同的情况下按照字段 2 排列</p><p>成绩表，姓名，成绩<br>查询一下第 3 到 6 的女学生姓名<br>select 姓名 from 成绩表 where 性别=’女’ order by 成绩 desc<br>limit 2,4;<br>MySQL 函数<br>concat(‘今天’,’晴天’) 拼接字符串<br>length(‘hello world’) 计算长度，一个字符，符号，数字占 1 位，<br>一个汉字占 3 位<br>upper(‘abcd’) 转成大写<br>ltrim(‘ abc’) 清除左侧空格<br>rtrim(‘abc ‘) 清除右侧空格<br>trim(‘ abc ‘) 清除两侧空格<br>replace(‘abccd’,’c’,’x’) 将 abccd 中的所有 c 替换成 x<br>strcmp(‘a’,’b’) 比较字符串大小<br>substring(‘abcdefg’,3,3) 取子串，从第 3 个开始取，取 3 个<br>数学函数<br>rand(); 取 0~1 的随机小数，取不到 0 和 1<br>ceil();向上取整<br>floor(); 向下取整</p><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="模糊查询和分组查询"><a href="#模糊查询和分组查询" class="headerlink" title="模糊查询和分组查询"></a>模糊查询和分组查询</h3><p>模糊查询使用 like 关键字， _代表一个字符 ，%代表任意长度的字<br>符（0 也是任意长度）<br>between and 关键字，表示大于等于第一个数，小于等于第二个数<br>select * from stuinfo where age between 18 and 20;where age &gt;=18 and age&lt;=20;<br>聚合函数<br>求和 sum，平均 avg，最大 max，最小 min，个数 count(<em>)使用聚合函数只有一行结果分组查询group by 写在 where 后面，order by 前面select \</em> from stuinfo group by age;只有聚合函数和被分组的列有意义使用 having 对分组结果进行条件查询，写在 group by 后面P43 count(*)和 count(列名)<br>count(列名)，如果列里面是 null 的，不计入总数</p><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p>数据库有3中连接方式（MySQL有），其他数据库如（Oracle，SQL Server）<br>有 4 中包括全连接</p><h3 id="1、内连接"><a href="#1、内连接" class="headerlink" title="1、内连接"></a>1、内连接</h3><pre><code>SELECT 列名 1,列名 2… FROM 表 1，表 2 WHERE 条件</code></pre><p>另一种写法</p><pre><code>SELECT 列名 1,列名 2… FROM 表 1 INNER JOIN 表 2 ON 条件</code></pre><h3 id="2、左连接"><a href="#2、左连接" class="headerlink" title="2、左连接"></a>2、左连接</h3><pre><code>SELECT 列名 1,列名 2… FROM 表 1 LEFT JOIN 表 2 ON 条件</code></pre><h3 id="3、右连接"><a href="#3、右连接" class="headerlink" title="3、右连接"></a>3、右连接</h3><pre><code>SELECT 列名 1,列名 2… FROM 表 1 RIGHT JOIN 表 2 ON 条件</code></pre><h3 id="4、全连接"><a href="#4、全连接" class="headerlink" title="4、全连接"></a>4、全连接</h3><p>先左连接再右连接</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA面向对象知识点总结</title>
    <link href="undefined2019/10/28/JAVA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>2019/10/28/JAVA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="第二章面向对象"><a href="#第二章面向对象" class="headerlink" title="第二章面向对象"></a>第二章面向对象</h2><p>1.面向对象：面向对象思想就是把一个项目，一件事情分成更小的项目，每一部分负责什么功能，最后再有这些部分组合成一个整体。</p><p>2.类的创建</p><pre><code class="java">    语法：public class 类名{}​      File---&gt;new---&gt;class---&gt;类名</code></pre><p>​      </p><p>3.创建对象</p><pre><code>类名 对象名=new 类名();​      对象名.方法名(); 对象名.属性</code></pre><p>4.构造方法：方法名和类名相同,没有返回值</p><pre><code>     public class 类名{​         public 类名(){}//主要的做用是初始化操作​      }</code></pre><p>5.构造方法重载</p><p>（1）构造方法的重载：方法名与类名相同，参数列表不同</p><p>（2）方法的重载：在同一个类中包含了两个或者两个以上的方法，它们的方法名相同，方法的参数个数，顺序，类型不同，则称这个方法被重载了，这个过程称为方法的重载。</p><p>（3）构造方法的作用：用来实现多种初始化行为。</p><pre><code>    public class 类名{​         public 类名(){}​         public 类名(String name,int age){}​      }</code></pre><p>6.构造方法的执行</p><pre><code>     new 类名();---&gt;执行构造方法​      super();---&gt;执行了父类的构造方法</code></pre><p>7.static静态修饰符</p><p>   （1）含义：static可以用来修饰属性，方法，和代码块。static修饰的变量属于这个类所有，即由这个类创建的所有对象共用一个static变量。通常把static修饰的属性和方法称为类属性（也可以称为类变量），类方法。不使用static修饰的属性和方法属于单个对象，通常称为实例属性，实例方法。</p><p>（2）要点：</p><p>​    1.在加载类的过程中，完成静态变量的内存分配，再执行静态代码块，两者是在创建对象之前执行的。</p><p>​    2.类属性和类方法可以通过类名和对象名访问，实例属性和实例方法只能通过对象名访问。</p><p>​    3.类方法只能访问类属性和其他类方法，</p><p>注意：静态方法中不能使用this和super关键字。</p><p>8.java内存（栈和堆，static，方法区，gc（垃圾回收机制））</p><p>9.八种基本数据类型：</p><pre><code>    byte  short   int   long    float   double   Boolean   char</code></pre><h2 id="第三章面向对象三大特征—封装"><a href="#第三章面向对象三大特征—封装" class="headerlink" title="第三章面向对象三大特征—封装"></a>第三章面向对象三大特征—封装</h2><h3 id="第三章-面向对象三大特征—封装"><a href="#第三章-面向对象三大特征—封装" class="headerlink" title="第三章 面向对象三大特征—封装"></a>第三章 面向对象三大特征—封装</h3><p>1.封装的概念：封装是指将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部的信息，而是通过该类所提供的方法来实现对内部信息的操作访问。</p><p>2.封装的步骤</p><p>​      1.把属性私有化（private）</p><p>​      2.对这些属性设置get和set方法</p><p>​      3.调用处理这些方法</p><p>3.封装的作用与好处：</p><p>作用：避免一些用一些不合乎常理的操作</p><p>好处：</p><p>（1） 提高了安全性</p><p>（2） 提高了复用性</p><p>（3） 隐藏了实现细节</p><p>4.封装的案例:</p><pre><code class="java">/* 文件名: EncapTest.java */public class EncapTest{   private String name;   private String idNum;   private int age;   public int getAge(){​      return age;   }   public String getName(){​      return name;   }   public String getIdNum(){​      return idNum;   }   public void setAge( int newAge){​      age = newAge;   }   public void setName(String newName){​      name = newName;   }   public void setIdNum( String newId){​      idNum = newId;   }}/* F文件名 : RunEncap.java */public class RunEncap{   public static void main(String args[]){​      EncapTest encap = new EncapTest();​      encap.setName(&quot;James&quot;);​      encap.setAge(20);​      encap.setIdNum(&quot;12343ms&quot;);​      System.out.print(&quot;Name : &quot; + encap.getName()+ ​                             &quot; Age : &quot;+ encap.getAge());​    }}</code></pre><p>5.修饰符</p><p>​      public—&gt;公共的：在一个项目中都可以访问，权限最高</p><p>​      private—&gt;私有的：只能在本类中进行访问，权限最低</p><p>​      protected—&gt;安全的，受保护的：同一个包能进行访问，继承中之类可以访问父类</p><p>​      default—&gt;默认的：同一个包能访问</p><h2 id="第四章-面向对象三大特征—继承"><a href="#第四章-面向对象三大特征—继承" class="headerlink" title="第四章 面向对象三大特征—继承"></a>第四章 面向对象三大特征—继承</h2><p>1.继承的概念：父亲儿子</p><p>2.继承的关键字：extends</p><p>3.继承的好处：</p><p>   （1）提高了代码的重用性</p><p>   （2）提高了代码的可扩展性</p><p>3.继承的语法：</p><pre><code>     public class 类名  extends 父类{    代码块   }</code></pre><p>4.继承的使用与说明：</p><p>   （1）使用：</p><p>可以直接调用父类的非私有属性和方法</p><p>​         可以用super.方法     super.属性</p><p>   （2）说明： Java中的继承只能单继承，</p><p>5.父类构造方法调用：super();</p><p>​     //super指代的是父类对象，this指代的是本类对象</p><p>​      调用父类的构造方法必须在之类中调用</p><p>​      必须实在之类构造方法的第一行代码</p><p>6.继承中的构造方法要点：</p><p>   （1）执行子类的构造方法，会默认执行父类的无参构造方法</p><p>  （2）当子类没有无参构造方法，但是有有参构造方法,子类的构造方法需手动添加</p><p>  （3）父类没有定义无参构造方法，定义了带参构造方法，子类的构造方法必须调用父类的带参构造方法。</p><p>  （4）无论是super还是this调用构造方法，只能放在第一行，构造方法只能调用一个</p><p>  （5）构造方法只能在构造方法中调用</p><p>7.重写@Override</p><p>​      必须继承</p><p>​      方法名一致，参数个数，顺序，类型全部一致</p><p>8.重载与重写的区别：</p><p>重载:一定发生在同一类中，方法名相同，参数不同（类型不同，数量不同）</p><p>重写：一定发生在父类和子类中，方法名相同，参数相同，方法体不同</p><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="第五章-面向对象—多态"><a href="#第五章-面向对象—多态" class="headerlink" title="第五章 面向对象—多态"></a>第五章 面向对象—多态</h2><p>1.多态的概念：不同对象对同一消息产生不同的响应。</p><p>2.多态的必要条件</p><p>   （1）继承</p><p>   （2）重写</p><p>   （3）父类引用指向子类对象（向上转型）</p><p>3.多态的优点：</p><p>   （1）消除类型之间的耦合关系</p><p>   （2）可替换性</p><p>   （3）可扩展性</p><p>   （4）接口性</p><p>   （5）灵活性</p><p>   （6）简化性</p><p>3.多态的使用</p><p>   （1）第一个例子</p><pre><code class="java"> public class Father{​         public void cooking(){​            System.out.println(&quot;米饭&quot;);​         }​      }​      public class Son extends Father{​         @Override​         public void cooking(){​            System.out.println(&quot;熬粥&quot;);​         }​      }​      public class Test {​         public static void main(String[] args) {​            Father son=new Son();​            son.cooking();​         }​      }</code></pre><p>   （2）第二个例子</p><pre><code class="java"> public class Test {​    public static void main(String[] args) {​      show(new Cat());  // 以 Cat 对象调用 show 方法​      show(new Dog());  // 以 Dog 对象调用 show 方法​                ​      Animal a = new Cat();  // 向上转型  ​      a.eat();               // 调用的是 Cat 的 eat​      Cat c = (Cat)a;        // 向下转型  ​      c.work();        // 调用的是 Cat 的 work  }  ​            ​    public static void show(Animal a)  {​      a.eat();  ​        // 类型判断​        if (a instanceof Cat)  {  // 猫做的事情 ​            Cat c = (Cat)a;  ​            c.work();  ​        } else if (a instanceof Dog) { // 狗做的事情 ​            Dog c = (Dog)a;  ​            c.work();  ​        }  ​    }  }abstract class Animal {  ​    abstract void eat();  }  class Cat extends Animal {  ​    public void eat() {  ​        System.out.println(&quot;吃鱼&quot;);  ​    }  ​    public void work() {  ​        System.out.println(&quot;抓老鼠&quot;);  ​    }  }  class Dog extends Animal {  ​    public void eat() {  ​        System.out.println(&quot;吃骨头&quot;);  ​    }  ​    public void work() {  ​        System.out.println(&quot;看家&quot;);  ​    }  }</code></pre><p> 4.向上转型（子类向父类的转换）  </p><pre><code> 语法 ：​      &lt;父类型&gt;  &lt;引用变量名&gt; = new  &lt;子类型&gt;（）；​      例如：Animal an1=new Dog（）；</code></pre><p>5.向下转型（必须基于向上转型）</p><pre><code>    例如：Son son=(Son)father;</code></pre><p>6.注意：</p><p>   （1）属性无多态这个属性，只看“=”左边的类型</p><p>   （2）编译时，能“.”出来，能调用的看“=”左边</p><p>7.Instanceof运算符：</p><p>8.异常的处理（Try-catch-finally块）：</p><pre><code>语法：​      Try{​         代码块；}catch（Exception  e）{   代码块；}finally{   代码块；}</code></pre><p>注意：</p><p>（1） catch（Exception  e）一定放在所有catch块的最后</p><p>（2） finally{}块里面的代码一定会执行</p><p>结束的语句：</p><pre><code>   （1）return；   （2）system.exit（0）;</code></pre><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h2 id="第六章-抽象"><a href="#第六章-抽象" class="headerlink" title="第六章 抽象"></a>第六章 抽象</h2><p>1.抽象的概念:当一个类没有足够的信息去描述一个具体的对象，那么我们称之为抽象类。</p><p>​    （1）在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象                 的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p><p>​    （2）注意：类是对象的描述，对象是类的具体体现</p><p>​    （3）抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问                                      方式和普通类一样。（由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。）</p><p>2.抽象的关键字</p><p>​      abstract</p><p>​      可以修饰类，可以修饰方法</p><p>3.抽象类的作用：</p><p>   （1）抽象类是用来继承的</p><p>   （2）抽象类无法new出对象</p><p>4.抽象的用法</p><pre><code>     //抽象类​      public abstract class 类名{​         //抽象方法没有方法体​         public abstract void 方法名();   ​      }     //当父类是抽象类的时候，子类必须重写父类里面的抽象方法</code></pre><p>​     </p><h4 id="5-抽象方法"><a href="#5-抽象方法" class="headerlink" title="5.抽象方法"></a>5.抽象方法</h4><p>（1）如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。</p><p>Abstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。</p><pre><code>public abstract class Employee{   private String name;   private String address;   private int number;   public abstract double computePay();   //其余代码}</code></pre><p>（2）声明抽象方法会造成以下两个结果</p><pre><code>（1）如果一个类包含抽象方法，那么该类必须是抽象类。（2）任何子类必须重写父类的抽象方法，或者声明自身为抽象类。（3）继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。</code></pre><p>6.final修饰符：最终的</p><p>   修饰变量，修饰方法，修饰类</p><p>   （1）.当修饰变量时，变量转换成常量，常量的值不能改变</p><p>​      final int a=18;//a=18;不能改变,必须给一个初始值</p><p>   （2）.当修饰方法时，该方法不能被重写</p><p>   （3）.当修饰类时，该类不能被继承</p><h4 id="7-抽象类总结规定"><a href="#7-抽象类总结规定" class="headerlink" title="7.抽象类总结规定"></a>7.抽象类总结规定</h4><pre><code>（1） 抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。（2）抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。（3）抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。（4）构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。（5）抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</code></pre><h3 id="-2"><a href="#-2" class="headerlink" title></a></h3><h2 id="第七章-接口"><a href="#第七章-接口" class="headerlink" title="第七章 接口"></a>第七章 接口</h2><p>为什么要用接口？：因为JAVA只支持单继承。</p><ol><li>接口的概念</li></ol><p>2.接口的关键字</p><p>​      interface</p><p>3.接口的语法</p><pre><code>      public interface 接口名{}​      File---&gt;new---&gt;interface//创建接口</code></pre><p>4.接口的实现与用法</p><p>（1）实现</p><pre><code>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。类使用implements关键字实现接口。在类声明中，Implements关键字放在class声明后面。</code></pre><p>（2）用法</p><pre><code>      实现接口的关键字  implements​      public interface 接口名{​         //接口是纯抽象类​         //接口里面的方法都是抽象方法​         void setData();​      }​      public class Play implements 接口名{​         @Override​         void setData(){​         }​      }​      public class Test {​         public static void main(String[] args) {​            Play play=new Play();​            play.setData();​         }​      }​      注意接口可以进行多继承​      public interface 接口名 extends 接口名，接口名{}​      一般用法​      public class 类名 extends 父类 implements 接口，接口{}</code></pre><p>多态与接口的区别：</p><p>（1） 多态：难</p><p>（2） 接口：简单，不能随意定义属性和方法，只能定义抽象方法，并且实现对口必须重写。</p><p>5.接口的特性</p><pre><code>（1）接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract（只能是 public abstract，其他修饰符都会报错）。（2）接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量（并且只能是 public，用 private 修饰会报编译错误）。（3）接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。（4）接口中的方法都是公有的。</code></pre><p>6.接口和类的区别</p><pre><code>- 接口不能用于实例化对象。- 接口没有构造方法。- 接口中所有的方法必须是抽象方法。- 接口不能包含成员变量，除了 static 和 final 变量。- 接口不是被类继承了，而是要被类实现。- 接口支持多继承。</code></pre><p>7.重写接口中声明的方法时，需要注意以下规则</p><pre><code>（1）类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。（2）类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。（3）如果实现接口的类是抽象类，那么就没必要实现该接口的方法。</code></pre><p>8.在实现接口的时候，也要注意一些规则：</p><pre><code>（1）一个类可以同时实现多个接口。（2）一个类只能继承一个类，但是能实现多个接口。（3）一个接口能继承另一个接口，这和类之间的继承比较相似。（4）接口可以多继承其他接口，不过继承要实现（父类和自己）全部的方法</code></pre><h4 id="9-接口和抽象类的详细区别"><a href="#9-接口和抽象类的详细区别" class="headerlink" title="9.接口和抽象类的详细区别"></a>9.接口和抽象类的详细区别</h4><p>语法层次的区别</p><pre><code> 1）抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法； 2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的； 3）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法； 4）一个类只能继承一个抽象类，而一个类却可以实现多个接口。</code></pre><p>设计层面的区别</p><pre><code>1）抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类 Airplane，将鸟设计为一个类 Bird，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。此时可以将 飞行 设计为一个接口Fly，包含方法fly( )，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。从这里可以看出，继承是一个 &quot;是不是&quot;的关系，而 接口 实现则是 &quot;有没有&quot;的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，比如鸟是否能飞（或者是否具备飞行这个特点），能飞行则可以实现这个接口，不能飞行就不实现这个接口。2）设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。什么是模板式设计？最简单例子，大家都用过 ppt 里面的模板，如果用模板 A 设计了 ppt B 和 ppt C，ppt B 和 ppt C 公共的部分就是模板 A 了，如果它们的公共部分需要改动，则只需要改动模板 A 就可以了，不需要重新对 ppt B 和 ppt C 进行改动。而辐射式设计，比如某个电梯都装了某种报警器，一旦要更新报警器，就必须全部更新。也就是说对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。下面看一个网上流传最广泛的例子：门和警报的例子：门都有 open() 和 close() 两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念：    第一种：        abstract class Door {                public abstract void open();                public abstract void close();        }    第二种：        interface Door {                public abstract void open();            public abstract void close();        }解答：但是现在如果我们需要门具有报警 的功能，那么该如何实现？下面提供两种思路：1）将这三个功能都放在抽象类里面，但是这样一来所有继承于这个抽象类的子类都具备了报警功能，但是有的门并不一定具备报警功能；2）将这三个功能都放在接口里面，需要用到报警功能的类就需要实现这个接口中的 open( ) 和 close( )，也许这个类根本就不具备 open( ) 和 close( ) 这两个功能，比如火灾报警器。从这里可以看出， Door 的 open() 、close() 和 alarm() 根本就属于两个不同范畴内的行为，open() 和 close() 属于门本身固有的行为特性，而 alarm() 属于延伸的附加行为。因此最好的解决办法是单独将报警设计为一个接口，包含 alarm() 行为，Door 设计为单独的一个抽象类，包含 open 和 close 两种行为。再设计一个报警门继承 Door 类和实现 Alarm 接口。</code></pre><h2 id="第八章-集合框架"><a href="#第八章-集合框架" class="headerlink" title="第八章 集合框架"></a>第八章 集合框架</h2><p>1.ArrayList</p><p>  1.用法</p><pre><code>     ArrayList list=new ArrayList();    list.add();//添加数据    list.get();//获取数据</code></pre><p>2.Map的用法：</p><pre><code>       Map map=new HasMap();​      map.put(key,value);//key不能重复​      map.get(key);//获取key对象的value</code></pre><p>3.泛型</p><pre><code>      ArrayList&lt;String&gt; list=new ArrayList&gt;&lt;String&gt;();      Map&lt;String,String&gt; map=new HasMap&lt;String,String&gt;();      ArrayList&lt;Map&lt;String,String&gt;&gt; list=new ArrayList&gt;&lt;Map&lt;String,String&gt;&gt;();</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web知识点总结</title>
    <link href="undefined2019/10/27/web%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>2019/10/27/web%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="知识点总结："><a href="#知识点总结：" class="headerlink" title="知识点总结："></a>知识点总结：</h3><p>1、HTML–超文本标记语言，以.html为扩展名。.htm网页文件<br>   浏览器–IE浏览器、FF火狐浏览器、Chrome谷歌浏览器、Safari苹果浏览器、O欧朋浏览器<br>   不同的浏览器，显示的效果不同，通常和浏览器或设备的宽度有关。<br>   什么是HTML？<br>   html语言–表名学习重点是代码部分。<br>   标记–生成网页的代码都是单独出现或成对出现的。<br>   例如： <b></b>–成对出现    <img>–单独出现<br>   超文本–网页中内容一般都是超链接，网页中各种元素都以文本的方式去描述。<br>   一首歌曲–D:/MP3/1.MP3，文本用路径把歌曲放在网页中执行<br>2、编写代码工具：HBuilder<br>   使用工具的方法：左侧项目管理器中—右键—新建web项目—项目名称（basic基本的、project项目、demo示例）—选择路径，尽量使用其他盘，不要放C盘或桌面—创建成功，相应的路径部分生成文件，css目录保存网页中的样式，img目录存放网页中的图片，js目录存放网页脚本，index.html文件是网页的入口文件，也叫索引文件，整个网页浏览依靠这个index.html文件。<br>  注意：站点名称不能是汉字，严格区分大小写，建议字母和数字组合。<br>3、网页的结构<br>   打开index.html文件，会发现有默认的网页结构。默认的结构是h5界面的。<br>   html发展历程：html4.0，用表格进行布局<br>                 xhtml1.0+css2.0，流行div+css布局<br>                 HTML5+css3.0，当下流行的<br>   完整开发模板调用：！+tab </p>   <!doctype html><p>文档声明–本文档是html网页的文档文件。<br>   网页的结构是html双标签包含网页中所有的内容。<br>   <html><br>   <head></head>–针对网页的定义<br>   <body></body>–针对网页中内容的显示<br>   </html><br>   在head标签中的标签：<br>    <meta charset="UTF-8">–meta元标记，定义网页<br>    charset字符集设置，utf-8和GB2312对应，utf-8中文和英文都支持  gb2312支持中文。<br>    <title>Document</title>标签控制网页标题栏的内容。<br>    body中内容的输入：<br>    不用写&lt;&gt;，直接写标签名称+tab让软件提示。<br>    注意：网页中的回车和空格都不影响网页效果，也就是说网页中回车和空格无效。</p><p>回顾：<br>    1、空格和换行在网页中不生效，进而说明编辑HTML的时候，输入多余的空格和回车不影响网页显示效果的，如果要强制使用空格用&nbsp;强制换行<br>标签。<br>     注意：br标签是单标签，所以/前要加空格。<br>   2、补充内容：<br>     meta元标签可以定义的：<br>   <meta name="viewport" content="width=device-width, initial-scale=1.0"><br>    设定视图的自适应宽度。网页中的内容在不同设备里显示宽度不一致。<br>        <meta name="Keywords" content="网页关键字"><br>    <meta name="Description" content="网页的描述"><br>   3、使用标签的注意事项：无论何种标签，标签必须使用小写字母表示，属性必须使用小写字母，标点符号必须使用不在输入法情况下输入效果。标签必须正确的嵌套。<br>      使用单标签：注意/前加空格。<br>      使用双标签：先写标签，再往标签内部插入其他标签或内容。<br>      网页中所有的内容都必须被标签包含，这样才能控制内容的修饰。加标签方便控制。<br>   总结：在HBuilder中，代码颜色有重要参考意义。标签都是浅蓝色，属性都是橙色，属性中的属性对显示绿色。<br>  4、为标签添加属性方法，在首标签中添加空格，激活软件的提示功能，进而进行选择属性的插入。<br>     style属性：可以引出相关的属性对，一组属性对用;表示结束。<br>     align属性：可以控制水平对齐方式。<br>  5、注释：针对代码进行解释，在网页中不显示。先写注释内容，然后鼠标拖拽选择注释内容，ctrl+/即可。<br>  6、自动跳转网页设置：<br>    <meta http-equiv="refresh" content="5;url=http://www.baidu.com"> 自动跳转<br>    5;url=<a href="http://www.baidu.com是content中的值。" target="_blank" rel="noopener">http://www.baidu.com是content中的值。</a><br>  7、hn的标题：n表示1-6，1字体最大，6字体最小。外联元素。外联元素占满了一行。<br>  8、p标签表示段落标记，外联元素。<br>  总结：所有的标签都分为不会自动换行的内联元素和会自动换行的外联元素，外联元素也叫块级元素。<br>        外联元素会自动换行，可以添加对齐的属性，所以可以用来布局。<br>        内联元素不会自动换行，不可以添加对齐的属性，无法布局，特点是只能进行修饰。<br>        外联元素–h标题标签和p段落标签<br>        内联元素–b加粗、u下划线、i倾斜、s删除、上标sup和下标sub<br>    如何验证陌生标签是内联和外联元素？<br>  9、相对路径和绝对路径<br>     绝对路径–可以是根目录开头的路径，如d:/abc/1.jpg<br>             –也可以是网上的网址路径，如<a href="http://www.baidu.com/img/1.jpg" target="_blank" rel="noopener">http://www.baidu.com/img/1.jpg</a><br>     相对路径–找文件之间的相对关系，平级文件直接写文件名。上一级文件用../表示。<br>  10、a标签–内联元素超链接标记，自带字体和蓝色，有下划线效果，必须添加href属性，否则不会有超链接的效果，如href没有具体的地址，用#表示空连接。target属性窗口的打开方式，_blank新窗口打开，_self本窗口内跳转。<br>     注意：a标签中的href和img标签中的src有区别的：<br>           href是从当前文件连接过去。<br>           src是把远处的文件拿过来展示。<br>  11、图片标签img标签，src表示图片的路径，站点中是相对路径。alt图片的描述，title属性是图片的提示信息，鼠标放在图片上的提示。切记，网页中图片不要用宽度width和高度height属性去控制图片的尺寸，网页应用图片之前要事先修改好图片的大小。图片是内联元素。<br>  12、图片的三种格式区别： gif动图–也可以用来表示背景透明的图片，常用来表示颜色单一的logo图。<br>                           jpg图–网页常用的图片，放大后会失真，变模糊。<br>                           png图–对分辨率要求较高，文件占位比较大。<br>  13、列表–ol有序列表，ul无序列表，dl自定义列表–列表都是外联元素。<br>       ol有序列表–ol中属性可以用type设定有序列表的样式，1、a、A、i、I表示。用start表示从第几个列表符号开始。<br>       ul列表中可以使用属性type，circle是空心点，disc实心点，square是矩形点。<br>       dl表示自定义列表，dt表示列表名称，dd对于名称的解释。<br>  14、table表格-table表示表格，th表示列首（一列中第一个单元格），tr表示一行，td表示一个单元格。<br>      table中的属性，border表格的边框，cellspacing表示表格的单元格之间的距离，cellpadding表示内容到单元格之间的内间距，bordercolor边框颜色，bgcolor表格的背景颜色，width宽度，height高度。<br>      行占位符和列占位符的用法：操作合并单元格的方法<br>      行占位符rowspan–占行成列的效果。<br>      列占位符colspan–占列成行的效果。<br>      切记一点：使用合并单元格，要先判断占行还是占列，然后添加占位符，删除对应的占位符。<br>  15、在表格中的thead标签，只可以用对其方式控制水平位置的变化，而不能进行样式的修饰。<br>      在表格中的tbody标签，使用方法遵循表格中tr和td内容显示，使用属性也都生效。<br>      在表格中的tfoot表示页脚，页脚中也可以用tr和td去显示内容。可以使用对齐方式。<br>  16、表单form标签，表单是搜集数据的，是外联元素，属性action表示将表单搜集的输入的内容传递到的目的地路径。<br>      属性method表示，把搜集的数据用何种方式传递到action定义的地址中去。<br>      在表单中，有三个主要的标签：input输入框   select选择下拉框  textarea文本域<br>      注意：这三个标签都要被form标签去包含。<br>      在input中最重要的是type属性，type属性表明是何种表单元素。<br>      <label for="tiger">用户名：</label><br>      <input type="text" value="请输入您的账号" id="tiger" maxlength="5"><br>解释：type=”text”表明这是一个可以输入文本的输入框，value文本框中默认的内容，id给文本框加上id，maxlength表示这个文本框最大输入几个字符。因为html中所有内容要被包含，所以添加label标签包含用户名，label中属性for的值对应相关表单的id值，只能对应id，不能对应别的参数，id必须使用英文，不得使用汉字。<br>      <input type="password" id="pwd" value="******"><br>      密码的type属性是password！<br><label for="man">男：</label><br><input type="radio" id="man"><br>单选的type值是radio，为实现单选的效果，必须为input添加name属性。name值一致，才能出现单选的效果。<br>     <input type="checkbox"><br>多选框的type值为checkbox，表示可以多个选择。<br>     <input type="file">type为file是上传文件的按钮。<br>    <input type="submit" value="提交">type为submit是提交按钮，点击提交按钮，会把form搜集的文件通过method定义的方式传递到action定义的地址去。<br>     <input type="reset" value="提交">type为reset重置，会把输入的内容清空。<br>    <input type="button" value="提交">type为button按钮，单纯点击，没有效果。<br>    按钮也可以直接作为标签使用–如：<button>按钮</button><br>17、表单中的下拉菜单select标签，包含的是option标签，option的属性有selected=”selected”选择默认的选项。<br>18、表单中的textarea表示文本域，rows表示文本域的高度，cols表示文本域的宽度。<br>总结：表单中的form是外联元素，而form中所有的内容都是内联元素。换行要用br强制换行。<br>表单的高级应用：<br> 表单中在HTML5中新增的input中type的属性：<br>   1、email，强制定义网页中的必须输入邮箱。如：<input type="email"><br>   2、number，强制定义输入的是数字，数字可以增加或减少。如：<input type="number"><br><br>   3、输入日期格式，year年，month月，day日，week周，time时间，datetime日期加时间格式：<br>      如：<input type="year"><br>   4、表示控制范围：<input type="range">，min属性表示最小，max表示最大<br>   5、只读的表单：<input type="text" value="张三很坏" readonly="readonly"><br> 表单中新增的属性：<br>    placeholder属性，当输入内容，默认的内容就不显示。如：<input type="text" placeholder="点我你看看我"><br>    required属性，设置表单中不能为空，必须输入内容。如：<input type="text" required="required" value="这个不能为空啊"><br>    6、label标签用来将内容和表单中的input进行绑定，利用label中for属性的值要和input中的id值对应，这样点击label的内容，就可以<br>       把光标设置在input的文本框中。<br>19、form中的fieldset标签包含legend标签，显示效果是美化的表单，线在文字中间，包含form中所有的内容。</p><form action="#" method="post">       <fieldset id>           <legend>注册界面</legend>           <label for="name">用户名：</label>           <input type="text" id="name" value="请输入内容">       </fieldset>    </form>       网页中的多媒体信息和新增HTML标签：   1、HTML5新增标签：这些标签都是放在body中的内容部分。      header--这个标签表示网页的头部信息，头部一般放网页的logo标志和其他相关信息。      nav导航标签--一般放网页中的导航信息。      article标签--表示网页中主要的内容。      section定义内容中的节，自然段。      aside--表示和内容相关的内容。如左侧是站内导航，右侧是关于导航的详细信息。      footer--表示网页的底部，一般放网页中的版权和警告信息。   2、关于网页中的多媒体信息：      bgsound标签控制网页背景音乐。<bgsound src="video/1.mp3"></bgsound>      audio标签网页中可见的mp3的播放：      <audio autoplay="autoplay" controls="controls">             <source src="video/1.mp3">         </audio>     autoplay自动播放，controls显示播放控件。   3、关于网页中的视频播放：      object标签、video标签      <video autoplay="autoplay" controls="controls">             <source src="video/1.mp4">         </video>     object标签： <object class id="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,19,0" width="500" height="440">  <param name="movie" value="flvplayer.swf">  <param name="quality" value="high">  <param name="allowFullScreen" value="true">  <param name="FlashVars" value="vcastr_file=video/abc.flv&LogoText=www.iloveyou.com&BufferTime=3&IsAutoPlay=0">  <embed src="flvplayer.swf" allowfullscreen="true" flashvars="vcastr_file=video/abc.flv&LogoText=www.iloveyou.com&IsAutoPlay=0" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" width="500" height="440"></object>               <video width="600" height="300" controls src="birds.mp4"></video>        <hr>        <video width="200" height="100" controls>            <source src="birds.mp4" type="video/mp4">        </video>   4、在网页中嵌套其他网页：       <iframe src="http://www.baidu.com" width height></iframe><p>网页中的CSS样式：对于网页内容进行修饰。<br>CSS文件叫层叠样式表，用来修饰网页中内容的样式，层叠表示修饰样式是多层存在的。<br>   a、CSS的文件扩展名是.css，在站点的css目录中建立层叠样式表的文件，一般用css.css或者style.css命名。<br>CSS样式可以修饰的内容是：内联元素标签和外联元素的标签。<br>     内联元素的特征：不会换行，重点在修饰，用css修饰内联元素自身之外的属性。<br>     外联元素的特征：自动换行，重点在布局，用css修饰外联元素进行布局时的宽度高度和位置等信息。<br>  总结：所有的HTML标签分为单标签和双标签，这两种标签都能用css修饰。<br>        所有的html标签分为内联元素和外联元素（块级元素），分别用css修饰各种的特点。<br>   b、使用css的方法，在css目录简历style.css的文件。然后再index.html入口文件的head部分，添加link的标签，link中的href属性来关联css的样式表文件。<br>      <link rel="stylesheet" type="text/css" href="css/style.css"><br>      rel属性表示样式的标签，tyle属性定义css的文本，href定义连接外部文件的路径。<br>   测试是否连接成功：<br>     在style.css中测试body{ background-color: blue;}，浏览器如果显示蓝色，表示连接成功。<br>     其中body叫css的选择符，在{ }中的background-color表示body的背景颜色，blue设置body的背景颜色为蓝色。<br>  注意：使用css时，第一行切记添加定义css的字符集。@charset “utf-8”;<br>上节课回顾：<br>   1、网页引用CSS文件的方法：<br>      a、link关联法，link关联法是网页文件index.html和style.css进行关联，也是唯一符合SEO规范的CSS引用方法。<br>      b、在网页文件index.html中的head标签中写入style的双标签，标签中写具体的css样式。<br>        例如：<style type="text/css"><br>        body{ background-color: green;}<br>           </style><br>      c、在网页文件index.html中的head标签中写入style的双标签，标签中写具体的css的外部引用文件。<br>        例如：<style type="text/css"></p><pre><code>       &lt;/style&gt;    注意：这种方法只能引入css的文件。  d、在网页的body中，双标签在首标签中插入style的属性，引出css的属性和值。    例如：&lt;h1 style=&quot;color: red; font-size: 160px;&quot;&gt;我是一个标题&lt;/h1&gt;   注意：每一个css属性写完，都要用分号结束。</code></pre><p>总结：使用CSS层叠样式表，可是实现网页的结构和样式的分离，方便我们对于网站进行维护。也就是说index.html中专门写html代码，在style.css中只写css样式，如果对于样式进行维护，直接打开style文件即可，无需考虑index.html的代码。<br>   2、css中的选择符：<br>      选择符{属性1：值1；属性2：值2；…}<br>   3、常用的选择符：<br>      a、类型选择符、元素选择符、标签选择符<br>      例如：在index.html中：<h1>我是内容</h1><br>            在style.css中：h1{color:red}<br>      b、id选择符，给html的标签设置id属性，在css中，用#id名称进行引用。<br>      例如：在index.html中：<h1 id=“tiger”>我是内容</h1><br>            在style.css中：#tiger{color:red}<br>      注意：id选择符具有唯一性，所以id的名称只能定义一次。id并不是只能使用一次。<br>      例如：在index.html中：<br>          <h1 id="tiger">我是另外一个h1</h1><br>      <p id="tiger">我是段落</p><br>            在style.css中：#tiger{color:red}<br>      c、class选择符，类选择符，类选择符可以定义一次，可以多次使用。在css中用.加类名引用。<br>          例如：在index.html中：<br>          <h1 class="tiger">我是另外一个h1</h1><br>      <p class="tiger">我是段落</p><br>             在style.css中：.tiger{color:red}<br>      注意：class选择符和id选择符的区别：class可以定义多个，id只能定义一个。<br>        案例：  在html中的代码：<br>                 <h1 class="tiger apple small">我是另外一个h1</h1><br>             <p id="banana daxiao">我是id的段落</p><br>             在css中：<br>                 .tiger{ font-size: 30px;}<br>             .apple{ color: red;}<br>             .small{ text-decoration: underline;}<br>             #banana{ color: green;}<br>             #daxiao{font-size: 70px;}<br>        d、交集选择符，由类型选择符和id选择符或类型选择符和class选择符组合使用生成的选择符。<br>         例如：在index.html中：<br>          <h1 class="tiger">我是另外一个h1</h1><br>      <p class="tiger">我是段落</p><br>             在style.css中：.tiger{color:red;}<br>                            h1.tiger{属性：值}<br>                             p.tiger{属性：值}<br>           注意交集选择符p.tiger{属性：值}一定类型选择符和类名引用相连，不能有空格。<br>        e、并集选择符–表示平级的选择符之间的关系。<br>           在html中：   <h1>我是另外一个h1</h1><br>                    <p>我是id的段落</p><br>           在css文件中： h1,p{color: red;}   —表示h1的标签和p的标签都遵循这个属性。<br>        f、混合选择符，交集选择符，类型选择符，id选择符，class选择符，同时使用。<br>           在css中：h1.apple,h5#banana{}–h1的apple类，和h5的id为bananan的都遵循此属性。<br>        g、包含选择符，也叫后代选择符—表示包含关系的选择符<br>            在html中： <h1><p>hello</p></h1><br>            在css中：h1 p{color: red;}–表示h1中包含的p标签的属性。<br>        h、*通配符–表示所有的类型选择符都遵循此属性。<br>           *{属性：值}<br>  案例：在index.html中：<br>         <h1>八仙过海</h1><br>       <p><a href="">八仙</a>那天有空，想要<a href="#" class="yanse">过海</a>，<br>           于是一个一个的拿出<a href="#">法宝</a>，<br>           就<a href="#" class="yanse ziti">过海</a>了</p><br>        在CSS文件中：<br>         *{ font-size: 35px;}<br>        h1{ color: red;}<br>         p{ font-size: 18px;}<br>       p a{ color: blueviolet;}<br>     p a.yanse{ color: darkkhaki; text-decoration: none;}<br>    p a.ziti{font-style: italic; font-weight: bold;}</p><p>在CSS中的选择符的优先级：当选择符定义同一个标签的元素，鉴别以哪种选择符的属性为准。<br>   id选择符&gt;class选择符&gt;类型选择符&gt;通配符*<br>  优先级中行内样式优先级最高！<br>  注意：在选择符中，行内样式定义的CSS距离内容最近，所以优先级最高，也就是县官不如现管！<br>        因为ID具有唯一性，而class可以定义多个，所以id大于class选择符。<br>        class可以单独定义到具体的html标签，所以针对性比类型选择符强，所以优先级比类型选择符高。<br>        <em>代表全局，范围太广泛，所以优先级是最低的。当我们使用样式，针对大多数的样式，可以使用</em><br>        进行定义，个别的样式单独存在的一种样式用id定义，凡是出现多次相同样式用class定义。<br>        当用<em>进行定义了属性，其他选择符定义的属性和</em>相同，就会把*通配符定义的属性冲突掉。<br>  案例：在index.html中：<br>          <h1>实训室教师使用管理规定</h1><br>      <ol><br>          <li class="yanse">不准吃饭1不准吃饭1不准吃饭1不准吃饭1</li><br>          <li>不准吃饭2不准吃饭2不准吃饭2不准吃饭2</li><br>          <li class="yanse">不准吃饭3不准吃饭不准吃饭不准吃饭</li><br>          <li>不准吃饭4不准吃饭不准吃饭不准吃饭</li><br>          <li class="yanse">不准吃饭5不准吃饭不准吃饭不准吃饭</li><br>          <li>不准吃饭6不<b class="italic">准吃</b>饭不准吃饭</li><br>          <li>不准吃饭7不准吃饭不准吃饭不准吃饭</li><br>          <li id="tiger">不准吃饭8不准吃饭不准吃饭不准吃饭</li><br>          <li>不准吃饭9不准吃饭<a href="#">不准吃饭</a>不准吃饭</li><br>          <li class="qingxie">不准吃饭10不准吃饭不准吃饭不准吃饭</li><br>      </ol><br>​       在css中的属性：<br>​          *{ color: blue; font-size: 28px;}<br>​      h1{font-size: 50px; font-family: “微软雅黑”;}<br>​      ol li.yanse{ color: red;}<br>​      ol li#tiger{ font-weight: bold;}<br>​      ol li.qingxie{ font-style: italic;}<br>​      ol li b{text-decoration: underline;}<br>​      ol li b.italic,ol li a{ color: darkgoldenrod;}<br>​    注意：font-family设置字体<br>​          font-size字体大小<br>​          font-weight: bold;字体加粗<br>​          font-style: italic;倾斜效果<br>​          text-decoration: underline;添加和删除下划线  underline是添加下划线，none是取消下划线</p><p> 上节课的回顾：CSS的引用四种方法，选择符的使用方法，常用的选择符，选择符的优先级</p><p>   关于DIV+CSS布局：<br>     内联元素修饰，外联元素布局。如果要修饰内联元素标签，就要使用b标签或者u标签，修饰不换行的内容，就要用内联标签，但内联标签不干净，自带有修饰效果，所以我们需要一个干净的没有任何自带修饰效果的内联元素标签，w3c组织提出干净的内联标签这个标签是span标签。<br>     与之相对象和匹配的，提出了一个干净的会自动换行的外联元素的标签，叫div标签。<br>     span内联+div的外联标签都是干净的标签，div专门用于布局，span专门用于修饰。<br>     因为网页中的每一块内容都是独立存在的，每一块都是布局，所以针对id选择符的特点，我们在div标签中如果要修饰div的css属性，用id选择符。修饰内联的span用class选择符。因为类可以有多个，又专门进行样式修饰使用的，所以span中使用class选择符。<br>     授课思路：先讲解内联元素的CSS属性有哪些？再讲解修饰外联元素的属性有哪些？<br>  内联元素的属性：<br>   a、字体font：<br>   font-family设置字体   font-size字体大小   font-weight: bold;字体加粗    font-style: italic;倾斜效果  color字体颜色<br>   b、文本text：<br>   text-align文本对齐方式，左中右   text-decoration:文本的下划线属性  text-indent首行缩进<br>   c、锚伪类，控制鼠标经过，鼠标选中，鼠标访问过后的效果<br>                a:link{color:red}–默认样式<br>                a:hover{ color: red;}—-鼠标经过<br>        a:active{ color: green;}–鼠标选定，手点击别松<br>        a:visited{color: yellow; }–鼠标点一下<br>    在网页使用锚伪类时，顺序不能改变，分别就是鼠标经过，鼠标选定，鼠标点击。<br>修饰外联元素的CSS属性：外联元素是一块，所以也叫块级元素，所以就有了网页中的盒子模型。<br>     盒子模型是指网页中的内容，盒子模型–border边框、content内容、内间距padding、margin外间距。所有的外联元素和内联元素都可以理解为一个盒子的存在。盒子模型中有宽度、高度、边框线、内间距、外间距<br>    a、width宽度，宽度有固定宽度和自适应宽度auto两种。<br>       width：200px;固定宽度，width：100%自适应宽度。<br>    inherit(继承)宽度，当父级的盒子指定固定宽度，而包含的盒子不指定宽度，包含的盒子会继承父级盒子的宽度。由此可见，宽度可以继承，高度可以被内容撑起。<br>    注意：只有外联元素才有宽（设定宽度网页效果会生效）。内联元素也有宽高，但是是随着内容而变化的宽高，也就是指定内联元素的宽高是不会有效果的。<br>    b、height高度，高度有固定高和内容撑起的高两种。<br>       height：200px；固定的高度。高度的属性不写，真实的高度会被内容撑起。<br>    注意：宽度的特征是会继承，高度的特征是不会继承父级元素的高，但会被内容撑起来。<br>    内容可能超过父级元素标签的宽高，所以我们用overflow控制内容溢出的属性。<br>    overflow的属性一般在父级元素标签中使用：<br>    overflow: hidden;当子级的标签超过父级标签，超出的部分隐藏掉。<br>    overflow: auto;超出部分会显示滚动条，如果不超出，就不显示滚动条。<br>    overflow: scroll;无论是否超出，都强制显示滚动条。<br>   总结：当使用宽度和高度的属性时，尽量写父级元素大盒子的宽度，别写高度，里面的小盒子只写高度，别写宽度。<br>          当宽度高度都是固定的高度，要使用overflow的属性。<br>    c、边框线border，可以同时定义四条线，可以定义单独一条线，一般我们采用简写的方式表示边框：<br>       border: dashed 1px red;<br>       注意：线的类型dashed虚线   dotted点线  solid实线  double双线（线的粗细不能低于1px）<br>    d、padding内间距，表示边框到内容之间的距离。设定盒子的内间距，会撑大盒子。<br>       内间距可以定义四个方向：当按照顺时针的方式进行每个padding的设定，盒子会被撑大相应的尺寸，和内容的间距，是padding-top和padding-left是真实的间距。当定义了padding-top间距，padding-bottom值失效（虽然值失效，这里失效是内容和边框间距失效，但撑大盒子的值并未失效），依次类推，定义padding-left，padding-right的值失效，但撑大效果并未失效。<br>       padding的简写效果：<br>       padding：10px—内间距四个方向都是10px间距<br>       padding：10px 20px；–内间距上下10px，左右20px间距。<br>       padding：10px 20px 30px；–内间距上10px，左右20px，下30px；<br>       padding：10px 20px 30px 40px–上10px，右20px，下30px，左40px（顺时针方向指定）<br>    固定宽高的盒子尺寸=宽度+内间距+border线<br>   总结：调整内容在大盒子中的位置，可以采用内间距padding，但内间距会撑大盒子，所以一定有属性也可以改变内容的间距，且不撑大盒子。这就是内容的外间距。<br>    继承大盒子的宽度的小盒子设定内间距为什么不受内间距撑大盒子的影响？<br>     当继承的宽度（不是固定设定的宽度）设定内间距不会撑大盒子。<br>    e、外间距margin，表示内容到边框的间距。简写的方式和内间距一样，也是顺时针进行设定。<br> padding的简写效果：<br>       margin：10px—内间距四个方向都是10px间距<br>       margin：10px 20px；–内间距上下10px，左右20px间距。<br>       margin：10px 20px 30px；–内间距上10px，左右20px，下30px；<br>       margin：10px 20px 30px 40px–上10px，右20px，下30px，左40px（顺时针方向指定）<br>    注意：外联元素和内联元素都可以使用内间距和外间距，但生效的位置不一样。<br>          外联元素进行内间距和外间距生效的是四个方向。<br>          内联元素的内间距生效的距离是左右和下，外间距生效的范围是水平的左右。<br>          利用外间距margin：0 auto；表示一个盒子的居中，但要注意，没有固定宽度的盒子是无法居中的。<br>   通常的盒子模型指的是内联元素还是外联元素？<br>    盒子模型–border边框，content内容，内间距padding，外间距margin<br>    内联元素也可以理解为盒子模型，因为都有边框内容和间距，但要注意，内联元素宽和高都是依靠内容撑起的，内间距依然撑大内联元素的盒子，外间距可以控制内联元素的外间距，但生效方式只有水平横向的位置。<br>    课堂案例操作习惯使用div外联元素进行演示的原因是在div表示盒子模型中的每个属性设定都有效果，所以用div验证盒子模型。用div宽度和高度都可以设定，但内联宽高无法设定。<br>    f、浮动float–盒子脱离了body文档流进行水平方向的移动。<br>       float：left左浮动     float：right右浮动     float：none不浮动<br>       清除浮动clear：清除浮动并不是设定盒子不再浮动回到body层，而是清除前面盒子布局对于后面盒子布局的影响，可以操作浮动层的内容换行。<br>      <div id="tiger"></div>    #tiger{ clear: both;}<br>​    g、定位position–盒子脱离body的文档流，进行二维坐标的定位。二维坐标就是top上，下bottom，左left，右right，当使用定位时，上下二维坐标取一个值，左右二维坐标取一个值，就能定位到一个具体的位置。<br>​      相对定位relative：相对盒子当前的位置进行移动，原先位置内容消失，脱离文档流。<br>#box{width: 200px;height: 200px; background: red;position: relative;top: 10px;left: 10px;}<br>​        a:hover{position: relative;top: 1px; left: 1px;}<br>    <div id="box"></div><br>​    <a href="#">搜狐</a><br>​      绝对定位absolute：相对body的边框进行移动，原先位置内容取消，脱离文档流。<br>​      注意：当大盒子定义了相对定位，小盒子定义绝对定位，小盒子的绝对定位不再参照body，而是参照大盒子进行移动。<br>​      固定定位fixed：始终参照body的位置进行定位。<br>​     使用定位时，如果定位的盒子发生了重叠，使用z-index来表示盒子层叠的优先级。<br> #box{width: 300px;height: 300px; background: red; position: relative; top: 10px; left: 10px;z-index: 1;}<br>#son{ width: 200px; height: 200px; background: blue; position: relative; top: -80px; left: 80px; z-index:0 ;}<br>#small{width: 100px;height: 100px; background: green;  position: relative; top: -250px; left: 250px;z-index: -1;}<br>           <div id="box"></div><br>       <div id="son"></div><br>       <div id="small"></div><br>​     h、visibility元素是否可见: hidden隐藏;visibility: hidden;表示盒子被隐藏但会有占位的效果。<br>​     j、display转换：实现内联元素和外联元素的相互转换。<br>​        display: inline;外联转内联<br>​        display: block；内联转外联<br>​        display：inline-block；行内块级元素，在一行显示，但可以定义宽高。<br>   网页中的列表、背景和控制图片的CSS属性：<br>   列表分为三类–有序列表ol   无序列表ul  自定义列表dl<br>​           注意：分清楚有序列表和无序列表的区别？使用列表要注意列表是有默认的内间距的。<br>​        默认有间距的是body的标签、h的标题标记、ul列表都有默认间距。无序列表中，列表符号和列表的内容默认不是一体的<br>​      列表可以用来制作网页中的新闻列表和菜单栏：使用列表时用包含选择符，先写列表的框架，再写列表的CSS选择符。<br>​      ul是外联元素，可以定义宽度，高度，实现居中对齐。<br>​      li是ul标签的子级元素，会继承ul的宽度，但注意ul有默认的内左侧间距，所以li是ul设定的宽度。可以利用通配符*清除默认的间距。 定义li的color颜色属性，列表符号的颜色会变化。<br>​      list-style列表符号的样式: square矩形点;none清除列表符号。<br>​      list-style-image: url(img/list.gif)列表图片的设定。<br>​      list-style-position: inside;设定符号在li里面，和li是一体的。<br>​      line-height设定行高，设定的是每行的高度。<br>   网页中的背景background：背景颜色，背景图片，背景图片是否重复，背景图片坐标，背景图片锁定。<br>   background-color: #ccc;背景颜色<br>   background-image: url(img/abb.jpg);背景图片，默认平铺效果<br>   background-repeat:no-repeat;背景图片重复<br>   background-position:1600px 30px;背景图片定位<br>   background-attachment: fixed;  背景图片锁定<br>   背景的使用一定要写简写的方式：<br>   background：#ccc url(路径) reapeat left left fixed；注意：背景图片的优先级高于背景颜色。<br>   背景填充法和CSS取图：<br>​     background: url(img/timg.jpg) no-repeat -441px -303px;<br>   网页中的图片img和表单form：<br>  a、网页中的图片多使用class选择符去引用，网页中通常能使用的属性是src属性和alt属性（图片信息的描述）<br>  b、img–src属性   link–href属性   a–href属性。切记不要使用width和height属性修饰图片的尺寸。<br>   网页中的form表单：表单form由三部分构成-input输入、select下拉菜单、textarea文本域，表单是外联元素，但里面的input、select、textarea都是内联元素不换行，所以使用表单时必须写form的标签，否则无法控制文本框input等内容的布局位置。<br>  c、行高的属性line-height：一行的高度，通过使用行高可以控制内容的行间距。如果一个盒子中有高度，而行高和高度一致，那么盒子中的文本内容会在盒子垂直居中的位置。也就说，文本的垂直居中使用vertical-align是不生效的，是通过行高进行设定的。<br>​     注意：内联元素不能设定高度，但是可以设定行高。<br>​           现在讲到的知识点可以使用vertical-align的元素有哪些？图片，表单（特殊的内联元素）。<br>​           特殊的内联元素特点–横在排列，在一行显示不换行，但是却可以控制元素的宽高。<br>  d、手型工具cursor:  默认手型 pointer; 帮助help；<br>  e、网页中的导航菜单：使用ul制作。利用li把列表的点清除掉，转换a标签变成块级元素，设定宽高，设定水平和垂直对齐方式，设置每个a标签的外间距即可。</p></style></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github博客搭建步骤</title>
    <link href="undefined2019/10/26/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/"/>
    <url>2019/10/26/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Github个人技术博客搭建步骤"><a href="#Github个人技术博客搭建步骤" class="headerlink" title="Github个人技术博客搭建步骤"></a>Github个人技术博客搭建步骤</h1><h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><p>1、GitHub账号</p><p>注册地址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><p>2、Node.js环境</p><p>下载地址：<a href="https://nodejs.org/download/" target="_blank" rel="noopener">https://nodejs.org/download/</a></p><p>3、Git 软件：下载地址<a href="http://git-scm.com/download/" target="_blank" rel="noopener">http://git-scm.com/download/</a></p><h3 id="二、软件安装"><a href="#二、软件安装" class="headerlink" title="二、软件安装"></a>二、软件安装</h3><p>1、注册GitHub账号</p><p>1)Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，此处账号名作为后期个人博客的地址使用2。并且需要勾选Initialize this repository with a README。（如果没有勾选，后期要创建README文件即可）</p><p>2)创建一个新的repository(代码仓库), 注意，名称必须是xxx.github.io 格式，并且xxx必须是你在GitHub的用户名。</p><p>3)在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，可以访问它。你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。</p><p>2.安装Node.js</p><p>在node.js指定地址下载，采用最新的版本即可。</p><ol><li>安装Git.</li></ol><h3 id="三、Hexo配置流程"><a href="#三、Hexo配置流程" class="headerlink" title="三、Hexo配置流程"></a>三、Hexo配置流程</h3><p>1、<strong>安装Hexo</strong></p><p>Hexo 是一款基于 Node.js 的静态博客框架。Hexo 使用 Markdown 解析文章，用户在本地安装Hexo并进行写作，通过一条命令，Hexo即可利用靓丽的主题自动生成静态网页。</p><p>1）新建文件夹hexo</p><p>首先创建一个文件夹，用来存放Hexo模板和项目，然后进入 hexo 文件夹，鼠标右键点击Git Bash Here。</p><p>2）安装hexo基础框架</p><p>// 这是安装hexo的基础框架（此处要求已经安装了node.js环境）</p><p>第一步：<code>npm install hexo-cli -g</code></p><p>第二步：`hexo init blog ```</p><p>它就会在当前目录下生成一个blog的文件夹，并在里面生成相关配置信息。</p><p>第三步：<code>cd blog</code></p><p>切换到blog目录下</p><p>第四步：<code>npm install</code></p><p>安装必备的组件，安装完成之后，<code>blog</code>文件夹的目录结构大致如下：</p><p>// 编译生成静态页面，会在当前目录下生成一个新的叫做public的文件夹。</p><p>第五步：<code>hexo g</code></p><p>``</p><p>// 启动本地服务</p><p>第六步：<code>hexo s</code></p><p>``</p><p>打开链接<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a>，看到这样的网页就成功啦。</p><pre><code></code></pre><p>2、 hexo主题设置，这里以主题yilia为例进行说明。</p><p>1）安装主题（此处当前目录为blog）</p><p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</p><p>2）启用主题</p><p>cd themes/yilia</p><p>git pull //获取远程内容</p><p>3） 修改配置文件</p><p>修改hexo目录下的_config.yml配置文件中的theme属性，将其设置为我们前面克隆下来的主体样式，此处theme: yilia</p><p>4） 重启服务</p><p>切换到blog目录</p><p>hexo g # 重新生成静态文件</p><p>hexo s # 启动本地web服务器</p><p>现在打开<a href="http://localhost:4000，会看到我们已经应用了一个新的主题。/" target="_blank" rel="noopener">http://localhost:4000，会看到我们已经应用了一个新的主题。</a></p><h3 id="四、部署到GitHub服务器"><a href="#四、部署到GitHub服务器" class="headerlink" title="四、部署到GitHub服务器"></a>四、部署到GitHub服务器</h3><p>1、使用git命令行部署（optional）</p><p>此处我们采用git命令来完成部署的工作。</p><p>1) cd d:/hexo/blog</p><p>git clone <a href="https://github.com/fang235/fang235.github.io" target="_blank" rel="noopener">https://github.com/cuihuniubi/cuihuniubi.github.io</a> .deploy/cuihuniubi.github.io</p><p>将我们之前创建的repo克隆到本地，新建一个目录叫做.deploy用于存放克隆的代码。</p><p>2) hexo generate //生成静态文件</p><p>cp -R public/* .deploy/cuihuniubi.github.io //复制文件</p><p>cd .deploy/cuihuniubi.github.io //切换目录</p><p>git add . //将需要提交的代码添加到暂存区</p><p>git commit -m “update” //将暂存区内容提交给本地版本库</p><p>git push //推送给远程服务器</p><p>简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至cuihuniubi.github.io的git目录下，然后使用git commit命令提交代码到cuihuniubi.github.io这个repo的master branch上。</p><p>需要部署的时候，执行第三个步骤。执行过程中可能需要让你输入Github账户的用户名及密码，按照提示操作即可。</p><p>2、 验证</p><p>打开浏览器，输入地址：<a href="https://cuihuniubi.github.io/" target="_blank" rel="noopener">https://cuihuniubi.github.io/</a> ，就可以看到我们的博客上线了哈哈哈！！！</p><h3 id="五、发布博客内容"><a href="#五、发布博客内容" class="headerlink" title="五、发布博客内容"></a>五、发布博客内容</h3><p>1、创建博客标题</p><p>hexo new “CUIHUNIUBI”</p><p>2、编写博客内容</p><p>找到创建的md文件，使用编辑器打开，按照Markdown的格式，编写博客内容，编写完成之后，执行以下代码，将博客内容推送到远程服务器上。</p><p>hexo generate //生成静态文件</p><p>cp -R public/* .deploy/cuihuniubi.github.io //复制文件</p><p>cd .deploy/cuihuniubi.github.io //切换目录</p><p>git add . //将需要提交的代码添加到暂存区</p><p>git commit -m “update” //将暂存区内容提交给本地版本库</p><p>git push //推送给远程服务器</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>